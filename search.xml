<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hexo搭建博客]]></title>
      <url>/2017/10/20/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="原博客搬迁"><a href="#原博客搬迁" class="headerlink" title="原博客搬迁"></a>原博客搬迁</h3><p>原本一直使用<a href="http://blog.csdn.net/cheng624" target="_blank" rel="external">CSDN的博客</a>记录一些自己的东西，但是前段时间登录发现一直需要我真实身份验证，抱着支持国家政策的态度我屈服了… 但是最近，后来为什么又出来一个必须扫描公众号二维码关注再完成手机验证。只想说你推广也就算了为毛还要强制！表示不服！<br>为了专治“不服”，我决定使用万能Github自行搭建博客，考虑了 <a href="http://jekyll.com.cn/" target="_blank" rel="external">Jekyll</a>，看了比人的一堆分析以后最终选择了 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo</a>，由于我的web前端只停留在html+css阶段故表示不懂他们底下的大区别，但是使用了以后只觉得 hexo很麻烦… 因为jekyll是github自动生成pages，hexo需要自己genegrate+deploy，我不知道这是不是代表我每次上传都必须有nodejs的环境，也不知道jekyll是不是这样…</p>
<p>最终，我还是选择了hexo，因为我看用到了 <a href="https://github.com/viosey/hexo-theme-material/" target="_blank" rel="external">Material</a> 的模板0.0</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>安装步骤很简单，一路文档操作：<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">连接</a><br>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>
<pre><code>Node.js
Git
</code></pre><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>
<pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="使用Material主题"><a href="#使用Material主题" class="headerlink" title="使用Material主题"></a>使用Material主题</h3><h4 id="建立一个空的站点"><a href="#建立一个空的站点" class="headerlink" title="建立一个空的站点"></a>建立一个空的站点</h4><p>选择一个心仪的文件夹，在此次cmd</p>
<pre class="line-numbers language-bash"><code class="language-bash">$ hexo init MyBlog <span class="token comment" spellcheck="true">#MyBlog是我要放置博客文件的文件夹</span>
$ <span class="token function">cd</span> MyBlog
$ <span class="token function">npm</span> <span class="token function">install</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>完成以后对应的目录</p>
<pre><code>.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
</code></pre><p>安装完成，在themes文件夹中已存在一个模板，由于它不是我们需要的模板，so把里面的文件删除干净，然后在里面用git或者直接down一份<a href="https://github.com/viosey/hexo-theme-material/" target="_blank" rel="external">Material</a> 的代码。解压完成。</p>
<h4 id="修改基本配置"><a href="#修改基本配置" class="headerlink" title="修改基本配置"></a>修改基本配置</h4><p>先修改主文件夹的 <em>_config.yml</em> 文件，具体含义<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">参考配置</a>， 主要的是修改</p>
<pre><code>language: zh-CN
</code></pre><p>把语言设置成中文</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Extensions</span>
<span class="token comment" spellcheck="true">## Plugins: https://hexo.io/plugins/</span>
<span class="token comment" spellcheck="true">## Themes: https://hexo.io/themes/</span>
theme: material
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>主题设置成material</p>
<p>打开material文件夹<br>复制一份 <em>_config.template.yml</em> 命名成 <em>_config.yml</em><br>里面的具体参数修改参考<a href="https://material.viosey.com/docs/#/config_basic" target="_blank" rel="external">这里</a></p>
<p>照做基本都能成</p>
<h4 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h4><p>使用本地搜索需要安装 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 插件。<br>在修改的 <em>_config.yml</em> 中<br>把 search: use 的值为 google 改为 local 即可。<br>然后在原 <em>_config.yml</em> 中添加</p>
<pre class="line-numbers language-bash"><code class="language-bash">search:
    path: search.xml
    field: all
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="添加标签云、照片墙、时间线"><a href="#添加标签云、照片墙、时间线" class="headerlink" title="添加标签云、照片墙、时间线"></a>添加标签云、照片墙、时间线</h4><p><a href="https://material.viosey.com/docs/#/pages" target="_blank" rel="external">参考这里</a></p>
<p>唯一需要说的就是需要在修改的 <em>_config.yml</em> 中仿照about界面添加对应标签</p>
<pre><code># Sidebar Customize
sidebar:
    pages:
        tags: #make sure the value corresponds to another one in language file
            link: &quot;/tags&quot;
            icon: label
            divider: false
        gallery:
            link: &quot;/gallery&quot;
            icon: photo
            divider: false
        about:
            link: &quot;/about&quot;
            icon: person
            divider: false
        timeline:
            link: &quot;/timeline&quot;
            icon: timeline
            divider: false
        links:
            link: &quot;/links&quot;
            icon: link
            divider: false
</code></pre><p>修改多语言文件 <em>zh_CN.yaml</em><br>sidebar:<br>    homepage: “主页”<br>    archive: “归档”<br>    article_num: “文章总数”<br>    about: “关于我”<br>    gallery: “图库”<br>    links: “友情链接”<br>    tags: “标签云” #this object name is mentioned above<br>    timeline: “时间轴”</p>
<h4 id="其他微调"><a href="#其他微调" class="headerlink" title="其他微调"></a>其他微调</h4><p>按照配置与自己心意随意更改，只要你喜欢，改代码也是可以的</p>
<h3 id="遇坑"><a href="#遇坑" class="headerlink" title="遇坑"></a>遇坑</h3><h4 id="自定义Pages的多语言"><a href="#自定义Pages的多语言" class="headerlink" title="自定义Pages的多语言"></a>自定义Pages的多语言</h4><p>我们添加了添加标签云、照片墙、时间线，同时，在zh_CN.yaml中配置了对应的中文，但是就是不显示<br>可修改代码 <em>layout/_partial/sidebar-navigation.ejs</em> 中的这一段</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if(theme.sidebar.pages[i].icon){</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>material-icons sidebar-material-icons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= theme.sidebar.pages[i].icon %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
&lt;%= i %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
&lt;% if(theme.sidebar.pages[i].divider === true) { %>


把 &lt;%= i %> 替换成 &lt;%= __('sidebar.' + i) %>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同理，主界面有一个分页导航也是如此。</p>
<h4 id="同步到github时Error"><a href="#同步到github时Error" class="headerlink" title="同步到github时Error"></a>同步到github时Error</h4><p>同步到github后，随后收到github的邮件， 说 You are attempting to use a Jekyll theme, “material”, which is not supported by GitHub Pages.</p>
<p>这是由于hexo的深坑必须得自己手动发布才有效。<br>安装 deployer 可解决</p>
<p>具体方法是 <a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/deployment.html</a></p>
<h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><p>1，关注主题的<a href="https://github.com/viosey/hexo-theme-material/issues" target="_blank" rel="external">Issue</a><br>2，博客<a href="https://liguanghe.github.io/2017/05/22/blogRebuilt/" target="_blank" rel="external">hexo 博客的神坑及本质原因</a><br>3，度娘<br>4，谷歌<br>5，自行分析</p>
]]></content>
      
        <categories>
            
            <category> 基础操作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[踩坑填坑——DropDown]]></title>
      <url>/2017/08/08/%E8%B8%A9%E5%9D%91%E5%A1%AB%E5%9D%91%E2%80%94%E2%80%94DropDown/</url>
      <content type="html"><![CDATA[<p>在使用UGUI的 DropDown 时， Canvas 的 Render Mode 选择了 Screen Space–Camera， 此时遇到一个小bug， 当我把这个下拉组件放到屏幕中间附近时， 下拉列表显示是正常的。当我把组件整体移到边缘，突然出现下拉列表的 Content 的坐标 不合法，由于 ugui 的点击关闭处理是在 Canvas 的子节点最下方又生成一个 全屏的 遮罩 来保证实现 “点击关闭”，所以此时整个界面卡死……….翻遍源码断点我也没找到问题..</p>
<p><img src="http://img.blog.csdn.net/20170808122348361?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="我的csdn">（中间：边缘）<img src="http://img.blog.csdn.net/20170808122416928?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="我的csdn"></p>
<p><img src="http://img.blog.csdn.net/20170808122431717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="我的csdn"></p>
<p>另外，他的下拉列表实现， 不适合多个数据，假如有百十个就生成百十个下来的子菜单，这明显是不合理的，所以，把下拉改成 无限循环 列表是必须的。<br>于是，开始自己动手造轮子：</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">
<span class="token keyword">using</span> System<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> Assets<span class="token punctuation">.</span>UI<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">.</span>UI<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/// &lt;summary></span>
<span class="token comment" spellcheck="true">/// Introduction: GDropDown</span>
<span class="token comment" spellcheck="true">/// Author:     Cheng</span>
<span class="token comment" spellcheck="true">/// Time: </span>
<span class="token comment" spellcheck="true">/// &lt;/summary></span>
<span class="token punctuation">[</span><span class="token function">AddComponentMenu</span><span class="token punctuation">(</span><span class="token string">"UI/GDropdown"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token function">RequireComponent</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GDropDown</span> <span class="token punctuation">:</span> MonoBehaviour
<span class="token punctuation">{</span>

    <span class="token punctuation">[</span><span class="token function">Tooltip</span><span class="token punctuation">(</span><span class="token string">"Button of Whole Component"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span>
    <span class="token keyword">private</span> Toggle m_CaptionToggle<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Button of Whole Component</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> Toggle CaptionToggle <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_CaptionToggle<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetCaptionButton</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token function">Tooltip</span><span class="token punctuation">(</span><span class="token string">"Display Text of Selected Item"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span>
    <span class="token keyword">private</span> Text m_CaptionText<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Display Text of Selected Item</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> Text CaptionText <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_CaptionText<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> m_CaptionText <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token function">Tooltip</span><span class="token punctuation">(</span><span class="token string">"Display Image of Selected Item"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span>
    <span class="token keyword">private</span> Image m_CaptionImage<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Display Image of Selected Item</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> Image CaptionImage <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_CaptionImage<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> m_CaptionImage <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span>Space<span class="token punctuation">]</span>

    <span class="token punctuation">[</span><span class="token function">Tooltip</span><span class="token punctuation">(</span><span class="token string">"Drop List"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span>
    <span class="token keyword">private</span> ScrollRect m_ScrollRect<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Drop List </span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> ScrollRect ScrollRect <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_ScrollRect<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> m_ScrollRect <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token function">Tooltip</span><span class="token punctuation">(</span><span class="token string">"Template of Drop List's Item"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>   
    <span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span>
    <span class="token keyword">private</span> GameObject m_DropItem<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Template of Drop List's Item</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> GameObject DropItem <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DropItem<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetDropItem</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token function">Tooltip</span><span class="token punctuation">(</span><span class="token string">"Current Select Index"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> m_Index<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Current Select Index</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> Index <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_Index<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetSelectIndex</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">string</span> Text <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DropData<span class="token punctuation">.</span>Count <span class="token operator">></span> Index <span class="token operator">?</span> m_DropData<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Drop Down Value Changed</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> OnValueChanged<span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token function">Tooltip</span><span class="token punctuation">(</span><span class="token string">"Drop Data"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span>
    List<span class="token operator">&lt;</span>GItemData<span class="token operator">></span> m_DropData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>GItemData<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> ScrollList m_ScrollList<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Dictionary<span class="token operator">&lt;</span>Transform<span class="token punctuation">,</span> GItem<span class="token operator">></span> m_Items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>Transform<span class="token punctuation">,</span> GItem<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> RectTransform m_PointerMask<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Transform m_Canvas<span class="token punctuation">;</span>


    <span class="token keyword">void</span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_ScrollList <span class="token operator">=</span> <span class="token generic-method function">GetOrAddComponent<span class="token punctuation">&lt;</span>ScrollList<span class="token punctuation">></span></span><span class="token punctuation">(</span>ScrollRect<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_ScrollList<span class="token punctuation">.</span>onItemRender <span class="token operator">=</span> OnItemRender<span class="token punctuation">;</span>
        <span class="token function">SetSelectIndex</span><span class="token punctuation">(</span>m_Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">SetDropItem</span><span class="token punctuation">(</span>m_DropItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RefreshShowValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">SetCaptionButton</span><span class="token punctuation">(</span>m_CaptionToggle<span class="token punctuation">)</span><span class="token punctuation">;</span>

        m_CaptionToggle<span class="token punctuation">.</span>isOn <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
        <span class="token function">CloseMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddOptions</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> options<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>m_DropData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GItemData</span><span class="token punctuation">(</span>options<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_CaptionToggle<span class="token punctuation">.</span>isOn<span class="token punctuation">)</span>
            <span class="token function">OpenMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddOptions</span><span class="token punctuation">(</span>Sprite<span class="token punctuation">[</span><span class="token punctuation">]</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> options<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>m_DropData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GItemData</span><span class="token punctuation">(</span>options<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_CaptionToggle<span class="token punctuation">.</span>isOn<span class="token punctuation">)</span>
            <span class="token function">OpenMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddOptions</span><span class="token punctuation">(</span>GItemData<span class="token punctuation">[</span><span class="token punctuation">]</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> options<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>m_DropData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>options<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_CaptionToggle<span class="token punctuation">.</span>isOn<span class="token punctuation">)</span>
            <span class="token function">OpenMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>m_DropData<span class="token punctuation">.</span>Count <span class="token operator">></span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>m_DropData<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> Index<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">SetSelectIndex</span><span class="token punctuation">(</span>index<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ClearOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>m_DropData<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_CaptionToggle<span class="token punctuation">.</span>isOn<span class="token punctuation">)</span>
            <span class="token function">OpenMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Refresh Display View</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">RefreshShowValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_DropData<span class="token punctuation">.</span>Count <span class="token operator">></span> Index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            GItemData data <span class="token operator">=</span> m_DropData<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>CaptionText <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                CaptionText<span class="token punctuation">.</span>text <span class="token operator">=</span> data<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>CaptionImage <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                CaptionImage<span class="token punctuation">.</span>sprite <span class="token operator">=</span> data<span class="token punctuation">.</span>image<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>CaptionText <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                CaptionText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>CaptionImage <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                CaptionImage<span class="token punctuation">.</span>sprite <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Render Item in List</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="index">&lt;/param></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="child">&lt;/param></span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnItemRender</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Transform child<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        GItem item<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_Items<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token keyword">out</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>
            item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_DropData<span class="token punctuation">.</span>Count <span class="token operator">></span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            item<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>m_DropData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span> m_DropData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>image<span class="token punctuation">,</span> index <span class="token operator">==</span> Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Set Cur Select Index When Click</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="p">&lt;/param></span>
    <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">SetSelectIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> m_DropData<span class="token punctuation">.</span>Count<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//if exist data</span>
        <span class="token punctuation">{</span>
            m_Index <span class="token operator">=</span> p<span class="token punctuation">;</span>
            <span class="token function">RefreshShowValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>OnValueChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">OnValueChanged</span><span class="token punctuation">(</span>m_Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_DropData<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Back To First</span>
            <span class="token punctuation">{</span>
                m_Index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token function">RefreshShowValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>OnValueChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">OnValueChanged</span><span class="token punctuation">(</span>m_Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token keyword">value</span> <span class="token keyword">in</span> m_Items<span class="token punctuation">.</span>Values<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        m_CaptionToggle<span class="token punctuation">.</span>isOn <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Open Mask to Poniters Out of List</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OpenMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_PointerMask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Create Mask</span>
        <span class="token punctuation">{</span>
            GameObject o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameObject</span><span class="token punctuation">(</span><span class="token string">"Pointer Mask"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            o<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Image mask <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mask<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_PointerMask <span class="token operator">=</span> o<span class="token punctuation">.</span>transform <span class="token keyword">as</span> RectTransform<span class="token punctuation">;</span>
            m_PointerMask<span class="token punctuation">.</span>sizeDelta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>width<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Button btnMask <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>Button<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            btnMask<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>CloseMask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Canvas <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Find Canvas</span>
        <span class="token punctuation">{</span>
            Canvas canvas <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token generic-method function">FindObjectOfType<span class="token punctuation">&lt;</span>Canvas<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_Canvas <span class="token operator">=</span> canvas<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        m_PointerMask<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_PointerMask<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>m_Canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_PointerMask<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_ScrollRect <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_ScrollRect<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>m_Canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_ScrollRect<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_ScrollList<span class="token punctuation">.</span>ChildCount <span class="token operator">=</span> m_DropData<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Close Mask to Other Pointers</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">CloseMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_PointerMask <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_PointerMask<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_PointerMask<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_ScrollRect <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_ScrollRect<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_ScrollRect<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Set Drop Item, Set Anchor Left-Top</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="item">&lt;/param></span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">SetDropItem</span><span class="token punctuation">(</span>GameObject item<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        RectTransform rect <span class="token operator">=</span> item<span class="token punctuation">.</span>transform <span class="token keyword">as</span> RectTransform<span class="token punctuation">;</span>
        rect<span class="token punctuation">.</span>anchorMin <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>up<span class="token punctuation">;</span>
        rect<span class="token punctuation">.</span>anchorMax <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>up<span class="token punctuation">;</span>
        m_DropItem <span class="token operator">=</span> item<span class="token punctuation">;</span>
        m_ScrollList<span class="token punctuation">.</span>Child <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Set Outter Button of Whole Component</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="btn">&lt;/param></span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">SetCaptionButton</span><span class="token punctuation">(</span>Toggle btn<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_CaptionToggle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            m_CaptionToggle<span class="token punctuation">.</span>onValueChanged<span class="token punctuation">.</span><span class="token function">RemoveListener</span><span class="token punctuation">(</span>OnCaptionButtonClicked<span class="token punctuation">)</span><span class="token punctuation">;</span>

        m_CaptionToggle <span class="token operator">=</span> btn<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m_CaptionToggle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            m_CaptionToggle<span class="token punctuation">.</span>onValueChanged<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>OnCaptionButtonClicked<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// On Caption Button Clicked</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnCaptionButtonClicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> active<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
            <span class="token function">OpenMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">CloseMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Get Or Add Component on O</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="o">&lt;/param></span>
    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
    T <span class="token generic-method function">GetOrAddComponent<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>GameObject o<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> Component
    <span class="token punctuation">{</span>
        T com <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>com <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            com <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> com<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Release All</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//If Release on Drop State, Delete Mask</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m_PointerMask <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            m_PointerMask<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Renderer Item in Endless List</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">protected</span> <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">GItem</span>
    <span class="token punctuation">{</span>
        GDropDown dropDown<span class="token punctuation">;</span>
        Transform item<span class="token punctuation">;</span>
        Button btn<span class="token punctuation">;</span>

        Text text<span class="token punctuation">;</span>
        Image image<span class="token punctuation">;</span>
        GameObject selected<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> activeSelf<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">string</span> m_Text <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> text<span class="token punctuation">.</span>text<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> text<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> Sprite m_Image <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> image<span class="token punctuation">.</span>sprite<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> image<span class="token punctuation">.</span>sprite <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token function">GItem</span><span class="token punctuation">(</span>GDropDown parent<span class="token punctuation">,</span> Transform item<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>dropDown <span class="token operator">=</span> parent<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>
            activeSelf <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>

            Transform t_trans <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">FindChild</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t_trans<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                text <span class="token operator">=</span> t_trans<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>Text<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            Transform t_image <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">FindChild</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t_image<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                image <span class="token operator">=</span> t_image<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>Image<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            Transform t_selected <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">FindChild</span><span class="token punctuation">(</span><span class="token string">"selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t_selected<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                selected <span class="token operator">=</span> t_selected<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            btn <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>Button<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>btn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Transform t_btn <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">FindChild</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t_btn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    btn <span class="token operator">=</span> dropDown<span class="token punctuation">.</span><span class="token generic-method function">GetOrAddComponent<span class="token punctuation">&lt;</span>Button<span class="token punctuation">></span></span><span class="token punctuation">(</span>t_btn<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    btn <span class="token operator">=</span> dropDown<span class="token punctuation">.</span><span class="token generic-method function">GetOrAddComponent<span class="token punctuation">&lt;</span>Button<span class="token punctuation">></span></span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            btn<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>OnBtnItemClicked<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnBtnItemClicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeSelf<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dropDown<span class="token punctuation">.</span><span class="token function">SetSelectIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">bool</span> active<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>activeSelf <span class="token operator">=</span> active<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>selected <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                selected<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span>active<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token keyword">string</span> txt<span class="token punctuation">,</span> Sprite sprite<span class="token punctuation">,</span> <span class="token keyword">bool</span> active<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                m_Text <span class="token operator">=</span> txt<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>image <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                m_Image <span class="token operator">=</span> sprite<span class="token punctuation">;</span>
            <span class="token function">SetActive</span><span class="token punctuation">(</span>active<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Cache Data</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GItemData</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span>
        <span class="token keyword">private</span> <span class="token keyword">string</span> m_Text<span class="token punctuation">;</span>
        <span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span>
        <span class="token keyword">private</span> Sprite m_Image<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">string</span> text  <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_Text<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token punctuation">{</span> m_Text <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> Sprite image <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_Image<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> m_Image <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token function">GItemData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token function">GItemData</span><span class="token punctuation">(</span><span class="token keyword">string</span> text<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token function">GItemData</span><span class="token punctuation">(</span>Sprite image<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> image<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token function">GItemData</span><span class="token punctuation">(</span><span class="token keyword">string</span> text<span class="token punctuation">,</span> Sprite image<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> image<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="http://img.blog.csdn.net/20170808122959444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="我的csdn"></p>
<p>组件的点击由Toggle 来控制 与 系统UGUI的类似，支持 点击选中 图片和文字， 自己添加一个下拉列表。</p>
<font color="red">注意： 下拉子选项中， 命名 “text”的“Text”组件、命名 “image”的“Image”组件为该选项的可填充值，看代码一眼便知。命名“selected”的表示下拉列表打开时该选项选中的表现，与toggle相同，我只是乐意改成了button表示而已</font>

<p>Index 就是当前选中项,无限列表需要用到我以前文章中的一篇<a href="https://garsonlab.github.io/2017/05/02/%E6%97%A0%E9%99%90%E5%88%97%E8%A1%A8%20ScrollView%20List/" target="_blank" rel="external">【UGUI】无限列表 ScrollView List</a></p>
]]></content>
      
        <categories>
            
            <category> UGUI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UGUI </tag>
            
            <tag> Dropdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一键排版对齐]]></title>
      <url>/2017/05/23/%E4%B8%80%E9%94%AE%E6%8E%92%E7%89%88%E5%AF%B9%E9%BD%90/</url>
      <content type="html"><![CDATA[<p>好久没有写东西了，因为最近忙，做一些项目上具体的功能。由于偶尔还是要拼一下UI，感觉对齐还是一个问题。虽然在以前写过一个<a href="https://garsonlab.github.io/2017/02/27/%E4%B8%80%E9%94%AE%E5%AF%B9%E9%BD%90%E7%88%B6%E8%8A%82%E7%82%B9/" target="_blank" rel="external">一键对齐父节点</a>的东西，可还是不够用，Unity中没有其他工具一样的辅助线。。。so,如果要让两个UI项以某种方式对齐排列，自己手动摆毛事总有那么一点点误差，除非你改坐标。我的功能是这样的：<br><img src="http://img.blog.csdn.net/20170523162739024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="我的csdn"></p>
<p><img src="http://img.blog.csdn.net/20170523162818399?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="我的csdn"></p>
<p>支持  <strong>缩放、锚点、中心点</strong> 不同，全部一键搞定。</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEditor<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/// &lt;summary></span>
<span class="token comment" spellcheck="true">/// Introduction: GUIAlignOthers</span>
<span class="token comment" spellcheck="true">/// Author:     Cheng</span>
<span class="token comment" spellcheck="true">/// Time: </span>
<span class="token comment" spellcheck="true">/// &lt;/summary></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GUIAlignOthers</span> <span class="token punctuation">:</span>Editor
<span class="token punctuation">{</span>

    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"GameObject/UI/Align/Top"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AlignTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Align</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"GameObject/UI/Align/Left"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AlignLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Align</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"GameObject/UI/Align/Right"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AlignRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Align</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"GameObject/UI/Align/Bottom"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AlignBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Align</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"GameObject/UI/Align/Horizontal"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AlignHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Align</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"GameObject/UI/Align/Vertical"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AlignVertical</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Align</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Align</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>RectTransform<span class="token operator">></span> rects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>RectTransform<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        GameObject<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> Selection<span class="token punctuation">.</span>gameObjects<span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> obj <span class="token keyword">in</span> objects<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform rect <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>RectTransform<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rect <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                rects<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>rects<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">Align</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> rects<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>



    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Align</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>RectTransform<span class="token operator">></span> rects<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        RectTransform tenplate <span class="token operator">=</span> rects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> w <span class="token operator">=</span> tenplate<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x <span class="token operator">*</span> tenplate<span class="token punctuation">.</span>lossyScale<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消除缩放影响</span>
        <span class="token keyword">float</span> h <span class="token operator">=</span> tenplate<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">*</span> tenplate<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span>

        <span class="token keyword">float</span> x <span class="token operator">=</span> tenplate<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> tenplate<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>x <span class="token operator">*</span> w<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//消除中心点并非pivot非（0.5，0.5）影响</span>
        <span class="token keyword">float</span> y <span class="token operator">=</span> tenplate<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> tenplate<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>y <span class="token operator">*</span> h<span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>上对齐
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    RectTransform trans <span class="token operator">=</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">float</span> th <span class="token operator">=</span> trans<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">*</span> trans<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
                    Vector3 pos <span class="token operator">=</span> trans<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
                    pos<span class="token punctuation">.</span>y <span class="token operator">=</span> y <span class="token operator">+</span> h <span class="token operator">-</span> th <span class="token operator">+</span> trans<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>y <span class="token operator">*</span> th<span class="token punctuation">;</span>
                    trans<span class="token punctuation">.</span>position <span class="token operator">=</span> pos<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>


                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>左对齐
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    RectTransform trans <span class="token operator">=</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">float</span> tw <span class="token operator">=</span> trans<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x <span class="token operator">*</span> trans<span class="token punctuation">.</span>lossyScale<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
                    Vector3 pos <span class="token operator">=</span> trans<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
                    pos<span class="token punctuation">.</span>x <span class="token operator">=</span> x <span class="token operator">+</span> tw<span class="token operator">*</span>trans<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
                    trans<span class="token punctuation">.</span>position <span class="token operator">=</span> pos<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>右对齐
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    RectTransform trans <span class="token operator">=</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">float</span> tw <span class="token operator">=</span> trans<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x <span class="token operator">*</span> trans<span class="token punctuation">.</span>lossyScale<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
                    Vector3 pos <span class="token operator">=</span> trans<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
                    pos<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token operator">+</span> w <span class="token operator">-</span> tw <span class="token operator">+</span> tw <span class="token operator">*</span> trans<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
                    trans<span class="token punctuation">.</span>position <span class="token operator">=</span> pos<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>下对齐
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    RectTransform trans <span class="token operator">=</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">float</span> th <span class="token operator">=</span> trans<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">*</span> trans<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
                    Vector3 pos <span class="token operator">=</span> trans<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
                    pos<span class="token punctuation">.</span>y <span class="token operator">=</span> y <span class="token operator">+</span> th<span class="token operator">*</span>trans<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
                    trans<span class="token punctuation">.</span>position <span class="token operator">=</span> pos<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>水平对齐
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    RectTransform trans <span class="token operator">=</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">float</span> th <span class="token operator">=</span> trans<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">*</span> trans<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
                    Vector3 pos <span class="token operator">=</span> trans<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
                    pos<span class="token punctuation">.</span>y <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">0.5f</span> <span class="token operator">*</span> h <span class="token operator">-</span> <span class="token number">0.5f</span><span class="token operator">*</span>th <span class="token operator">+</span> th <span class="token operator">*</span> trans<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
                    trans<span class="token punctuation">.</span>position <span class="token operator">=</span> pos<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>垂直对齐
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    RectTransform trans <span class="token operator">=</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">float</span> tw <span class="token operator">=</span> trans<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x <span class="token operator">*</span> trans<span class="token punctuation">.</span>lossyScale<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
                    Vector3 pos <span class="token operator">=</span> trans<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
                    pos<span class="token punctuation">.</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">0.5f</span> <span class="token operator">*</span> w <span class="token operator">-</span> <span class="token number">0.5f</span> <span class="token operator">*</span> tw <span class="token operator">+</span> tw <span class="token operator">*</span> trans<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
                    trans<span class="token punctuation">.</span>position <span class="token operator">=</span> pos<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> UGUI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UGUI </tag>
            
            <tag> 对齐 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[无限列表 ScrollView List]]></title>
      <url>/2017/05/02/%E6%97%A0%E9%99%90%E5%88%97%E8%A1%A8%20ScrollView%20List/</url>
      <content type="html"><![CDATA[<p>无线列表的实现好处有一些，主要方法是在ScrollView的值改变的时候改变已存在的渲染子节点位置。最核心的是计算Content的大小及里面的节点位置设置。</p>
<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">.</span>UI<span class="token punctuation">;</span>

<span class="token keyword">namespace</span> Assets<span class="token punctuation">.</span>UI
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Introduction: ScrollList</span>
    <span class="token comment" spellcheck="true">/// Author:     Cheng</span>
    <span class="token comment" spellcheck="true">/// Time: </span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token punctuation">[</span>DisallowMultipleComponent<span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token function">RequireComponent</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>ScrollRect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScrollList</span> <span class="token punctuation">:</span> MonoBehaviour
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">OnItemRender</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Transform child<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> OnItemRender onItemRender<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 排序方式</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">enum</span> Arrangement
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 横排</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Horizontal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 竖排</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Vertical<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 水平对齐</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">enum</span> HorizontalAlign
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 居左</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Left<span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 居中</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Middle<span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 局右</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Right<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 垂直对齐</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">enum</span> VerticalAlign
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 居上</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Top<span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 居中</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Middle<span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 局下</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Bottom<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">public</span> Arrangement arrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 当选择水平或垂直流动是有用，指每行/列最大个数</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> MaxPerLine
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> maxPerLine<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetMaxPerLine</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 行距</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> rowSpace <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 列距</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> columuSpace <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> HorizontalAlign horizontalAlign <span class="token operator">=</span> HorizontalAlign<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>
        <span class="token keyword">public</span> VerticalAlign verticalAlign <span class="token operator">=</span> VerticalAlign<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 边缘留空 上</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> marginTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 边缘留空 下</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> marginBottom <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 边缘留空 左</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> marginLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 边缘留空 右</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> marginRight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 渲染子节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> GameObject Item
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> item<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetItem</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 总个数</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> ChildCount
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> childCount<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetChildCount</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置显示窗口大小</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> Vector2 ViewPort
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> viewPort<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetViewPort</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        GameObject item<span class="token punctuation">;</span>
        ScrollRect scrollRect<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// RectTransform mask;</span>
        Vector2 viewPort<span class="token punctuation">;</span>
        RectTransform content<span class="token punctuation">;</span>
        Vector2 itemSize<span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Transform<span class="token operator">></span> items<span class="token punctuation">;</span>
        Dictionary<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> contains<span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> outOfContains<span class="token punctuation">;</span>
        <span class="token keyword">int</span> childCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//需要渲染的总数据个数</span>
        <span class="token keyword">int</span> scrollLineIndex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前第一个元素索引</span>
        <span class="token keyword">int</span> totalCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在UI中显示的个数(不乘以maxPerLine)</span>
        Vector2 startPos<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一个元素所在位置</span>
        <span class="token keyword">int</span> startIndex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前渲染起始坐标</span>
        <span class="token keyword">int</span> endIndex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前渲染结束坐标</span>
        <span class="token keyword">int</span> maxPerLine<span class="token punctuation">;</span>

        <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            maxPerLine <span class="token operator">=</span> maxPerLine <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> maxPerLine<span class="token punctuation">;</span>
            items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Transform<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            contains <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            outOfContains <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            scrollRect <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>ScrollRect<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// mask = scrollRect.GetComponentInChildren&lt;Mask>().rectTransform;</span>
            content <span class="token operator">=</span> scrollRect<span class="token punctuation">.</span>content<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"ScrollRect "</span> <span class="token operator">+</span> scrollRect<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" Has No Content, Please Check And Retry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            content<span class="token punctuation">.</span>anchorMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            content<span class="token punctuation">.</span>anchorMin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            content<span class="token punctuation">.</span>pivot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 当子节点、Mask、maxPerLine</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollRect <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> content <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token function">ResetChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Vector2 maskSize <span class="token operator">=</span> viewPort<span class="token punctuation">;</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Horizontal<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                count <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>x<span class="token operator">/</span>itemSize<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//横向列数</span>
                startPos <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
                startPos<span class="token punctuation">.</span>x <span class="token operator">=</span> marginLeft<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>verticalAlign <span class="token operator">==</span> VerticalAlign<span class="token punctuation">.</span>Top<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>marginTop<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>verticalAlign <span class="token operator">==</span> VerticalAlign<span class="token punctuation">.</span>Middle<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>y<span class="token operator">*</span><span class="token number">0.5f</span> <span class="token operator">-</span> <span class="token punctuation">(</span>itemSize<span class="token punctuation">.</span>y<span class="token operator">*</span>maxPerLine <span class="token operator">+</span> <span class="token punctuation">(</span>maxPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>rowSpace<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>verticalAlign <span class="token operator">==</span> VerticalAlign<span class="token punctuation">.</span>Bottom<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>y <span class="token operator">-</span> marginBottom <span class="token operator">-</span> itemSize<span class="token punctuation">.</span>y<span class="token operator">*</span>maxPerLine <span class="token operator">-</span> rowSpace<span class="token operator">*</span><span class="token punctuation">(</span>maxPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> maxPerLine<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        RectTransform child <span class="token operator">=</span> <span class="token function">CreateItem</span><span class="token punctuation">(</span>i<span class="token operator">*</span>maxPerLine <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        child<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> startPos <span class="token operator">+</span>
                                              <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>i<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>x <span class="token operator">+</span> i<span class="token operator">*</span>columuSpace<span class="token punctuation">,</span> <span class="token operator">-</span>j<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>y <span class="token operator">-</span> j<span class="token operator">*</span>rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                count <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>y<span class="token operator">/</span>itemSize<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//竖向行数</span>
                startPos <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
                startPos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>marginTop<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重置开始节点位置</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontalAlign <span class="token operator">==</span> HorizontalAlign<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>x <span class="token operator">=</span> marginLeft<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontalAlign <span class="token operator">==</span> HorizontalAlign<span class="token punctuation">.</span>Middle<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>x<span class="token operator">*</span><span class="token number">0.5f</span> <span class="token operator">-</span> <span class="token punctuation">(</span>itemSize<span class="token punctuation">.</span>x<span class="token operator">*</span>maxPerLine <span class="token operator">+</span> <span class="token punctuation">(</span>maxPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>columuSpace<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontalAlign <span class="token operator">==</span> HorizontalAlign<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>x <span class="token operator">=</span> maskSize<span class="token punctuation">.</span>x <span class="token operator">-</span> marginRight <span class="token operator">-</span> itemSize<span class="token punctuation">.</span>x<span class="token operator">*</span>maxPerLine <span class="token operator">-</span> columuSpace<span class="token operator">*</span><span class="token punctuation">(</span>maxPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> maxPerLine<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        RectTransform child <span class="token operator">=</span> <span class="token function">CreateItem</span><span class="token punctuation">(</span>i<span class="token operator">*</span>maxPerLine <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        child<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> startPos <span class="token operator">+</span>
                                              <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>j<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>x <span class="token operator">+</span> j<span class="token operator">*</span>columuSpace<span class="token punctuation">,</span> <span class="token operator">-</span>i<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>y <span class="token operator">-</span> i<span class="token operator">*</span>rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            totalCount <span class="token operator">=</span> count<span class="token punctuation">;</span>

            <span class="token function">SetChildCount</span><span class="token punctuation">(</span>childCount<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">BackTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            scrollRect<span class="token punctuation">.</span>onValueChanged<span class="token punctuation">.</span><span class="token function">RemoveAllListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            scrollRect<span class="token punctuation">.</span>onValueChanged<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>OnValueChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 列表滚动</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="vec">&lt;/param></span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnValueChanged</span><span class="token punctuation">(</span>Vector2 vec<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>arrangement<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">case</span> Arrangement<span class="token punctuation">.</span>Horizontal<span class="token punctuation">:</span>
                 <span class="token comment" spellcheck="true">//   if (vec.x &lt; 0.0f || vec.x >= 1.0f)</span>
                 <span class="token comment" spellcheck="true">//       return;</span>
                        vec<span class="token punctuation">.</span>x <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">:</span>
                 <span class="token comment" spellcheck="true">//   if (vec.y &lt;= 0.0f || vec.y >= 1.0f)</span>
                 <span class="token comment" spellcheck="true">//       return;</span>
                        vec<span class="token punctuation">.</span>y <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">int</span> curLineIndex <span class="token operator">=</span> <span class="token function">GetCurLineIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>curLineIndex <span class="token operator">!=</span> scrollLineIndex<span class="token punctuation">)</span>
                <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span>curLineIndex<span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 获取页面第一行索引</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">GetCurLineIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>arrangement<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">case</span> Arrangement<span class="token punctuation">.</span>Horizontal<span class="token punctuation">:</span>
                    <span class="token keyword">return</span>
                        Mathf<span class="token punctuation">.</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> marginLeft<span class="token punctuation">)</span><span class="token operator">/</span>
                                         <span class="token punctuation">(</span>columuSpace <span class="token operator">+</span> itemSize<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">:</span>
                    <span class="token keyword">return</span>
                        Mathf<span class="token punctuation">.</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> marginTop<span class="token punctuation">)</span><span class="token operator">/</span>
                                         <span class="token punctuation">(</span>rowSpace <span class="token operator">+</span> itemSize<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 更新数据（待修改问出现的才刷新）</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="curLineIndex">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="forceRender">&lt;/param></span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> curLineIndex<span class="token punctuation">,</span> <span class="token keyword">bool</span> forceRender<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>curLineIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            startIndex <span class="token operator">=</span> curLineIndex<span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            endIndex <span class="token operator">=</span> <span class="token punctuation">(</span>curLineIndex <span class="token operator">+</span> totalCount<span class="token punctuation">)</span><span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">>=</span> childCount<span class="token punctuation">)</span>
                endIndex <span class="token operator">=</span> childCount<span class="token punctuation">;</span>

            contains<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//渲染序号</span>
            outOfContains<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//items的索引</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果当前已渲染的item中包含</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> startIndex <span class="token operator">||</span> index <span class="token operator">>=</span> endIndex<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    outOfContains<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    contains<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// *************更改渲染****************</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>contains<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Transform child <span class="token operator">=</span> items<span class="token punctuation">[</span>outOfContains<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    outOfContains<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    child<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> row <span class="token operator">=</span> i<span class="token operator">/</span>maxPerLine<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> col <span class="token operator">=</span> i<span class="token operator">%</span>maxPerLine<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">)</span>
                        child<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> startPos <span class="token operator">+</span>
                                              <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>col<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token operator">*</span>columuSpace<span class="token punctuation">,</span>
                                                  <span class="token operator">-</span>row<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token operator">*</span>rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        child<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> startPos <span class="token operator">+</span>
                                              <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>row<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token operator">*</span>columuSpace<span class="token punctuation">,</span>
                                                  <span class="token operator">-</span>col<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token operator">*</span>rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    child<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>onItemRender <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token function">onItemRender</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>forceRender<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>onItemRender <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token function">onItemRender</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> items<span class="token punctuation">[</span>contains<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            scrollLineIndex <span class="token operator">=</span> curLineIndex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移除当前所有</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ResetChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> content<span class="token punctuation">.</span>childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Transform child <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                child<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 创建新节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="index">&lt;/param></span>
        <span class="token keyword">private</span> RectTransform <span class="token function">CreateItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Transform child<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>childCount <span class="token operator">></span> index<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                child <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                GameObject obj <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">Instantiate</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">as</span> GameObject<span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>localScale <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span>
                child <span class="token operator">=</span> obj<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            child<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> child <span class="token keyword">as</span> RectTransform<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置资源</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="child">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetItem</span><span class="token punctuation">(</span>GameObject child<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> child<span class="token punctuation">;</span>
            RectTransform itemTrans <span class="token operator">=</span> child<span class="token punctuation">.</span>transform <span class="token keyword">as</span> RectTransform<span class="token punctuation">;</span>
            itemTrans<span class="token punctuation">.</span>pivot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            itemSize <span class="token operator">=</span> itemTrans<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">;</span>
            <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 更新需要渲染的个数</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="value">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetChildCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> forceRender<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> childCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> childCount <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> rc <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> childCount<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> maxPerLine<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置content的大小</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Horizontal<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>sizeDelta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>marginLeft <span class="token operator">+</span> marginRight <span class="token operator">+</span> itemSize<span class="token punctuation">.</span>x<span class="token operator">*</span>rc <span class="token operator">+</span> columuSpace<span class="token operator">*</span><span class="token punctuation">(</span>rc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    viewPort<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x <span class="token operator">></span> viewPort<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> viewPort<span class="token punctuation">.</span>x <span class="token operator">-</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
                    content<span class="token punctuation">.</span>anchoredPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>viewPort<span class="token punctuation">.</span>x <span class="token operator">-</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x<span class="token punctuation">,</span> content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>sizeDelta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>viewPort<span class="token punctuation">.</span>x<span class="token punctuation">,</span> marginTop <span class="token operator">+</span> marginBottom <span class="token operator">+</span> itemSize<span class="token punctuation">.</span>y<span class="token operator">*</span>rc <span class="token operator">+</span> rowSpace<span class="token operator">*</span><span class="token punctuation">(</span>rc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">></span> viewPort<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>y <span class="token operator">></span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">-</span> viewPort<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
                    content<span class="token punctuation">.</span>anchoredPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>x<span class="token punctuation">,</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">-</span> viewPort<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span><span class="token function">GetCurLineIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 添加子节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="index">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            startIndex <span class="token operator">=</span> scrollLineIndex<span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            endIndex <span class="token operator">=</span> <span class="token punctuation">(</span>scrollLineIndex <span class="token operator">+</span> totalCount<span class="token punctuation">)</span><span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            <span class="token function">SetChildCount</span><span class="token punctuation">(</span>childCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">>=</span> startIndex <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 删除子节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="index">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> childCount<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            startIndex <span class="token operator">=</span> scrollLineIndex<span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            endIndex <span class="token operator">=</span> <span class="token punctuation">(</span>scrollLineIndex <span class="token operator">+</span> totalCount<span class="token punctuation">)</span><span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            <span class="token function">SetChildCount</span><span class="token punctuation">(</span>childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">>=</span> startIndex <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置显示窗口大小</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="port">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetViewPort</span><span class="token punctuation">(</span>Vector2 port<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> viewPort<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            viewPort <span class="token operator">=</span> port<span class="token punctuation">;</span>
            <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置行列最大</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="max">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetMaxPerLine</span><span class="token punctuation">(</span><span class="token keyword">int</span> max<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            maxPerLine <span class="token operator">=</span> max<span class="token punctuation">;</span>
            <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 返回顶部</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">BackTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            content<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
            <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 返回底部</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">BackBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>viewPort<span class="token punctuation">.</span>y <span class="token operator">+</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>viewPort<span class="token punctuation">.</span>x <span class="token operator">-</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> childCount<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> maxPerLine<span class="token punctuation">)</span> <span class="token operator">-</span> totalCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RefreshViewItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span>scrollLineIndex<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果：<br><img src="http://img.blog.csdn.net/20170502192738648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图片来源我的csdn"></p>
<p>当选择水平布局的时候“每行个数”会切换为“每列个数”。<br>由于Mask的锚点设置时相对父节点全局拉伸，我没看到怎么获取他的Size， 所以写了一个 “显示窗口” 及ViewPort来手动填他的大小。</p>
<p><strong>实际使用中发现了一些问题，做出一些优化，最终代码为：</strong></p>
<pre class="line-numbers language-csharp"><code class="language-csharp">
<span class="token keyword">using</span> System<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">.</span>UI<span class="token punctuation">;</span>

<span class="token keyword">namespace</span> Assets<span class="token punctuation">.</span>UI
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Introduction: 无限列表</span>
    <span class="token comment" spellcheck="true">///             Content上禁止挂载ContentSizeFilter和LayOutGroup之类组件</span>
    <span class="token comment" spellcheck="true">/// Author:     Cheng</span>
    <span class="token comment" spellcheck="true">/// Time: </span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token punctuation">[</span>DisallowMultipleComponent<span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token function">RequireComponent</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>ScrollRect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScrollList</span> <span class="token punctuation">:</span> MonoBehaviour
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">OnItemRender</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Transform child<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> OnItemRender onItemRender<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 排序方式</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">enum</span> Arrangement
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 横排</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Horizontal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 竖排</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Vertical<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 水平对齐</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">enum</span> HorizontalAlign
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 居左</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Left<span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 居中</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Middle<span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 局右</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Right<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 垂直对齐</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">enum</span> VerticalAlign
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 居上</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Top<span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 居中</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Middle<span class="token punctuation">,</span>

            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 局下</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            Bottom<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">public</span> Arrangement arrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 当选择水平或垂直流动是有用，指每行/列最大个数</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> MaxPerLine
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> maxPerLine<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetMaxPerLine</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 行距</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> rowSpace <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 列距</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> columuSpace <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> HorizontalAlign horizontalAlign <span class="token operator">=</span> HorizontalAlign<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>
        <span class="token keyword">public</span> VerticalAlign verticalAlign <span class="token operator">=</span> VerticalAlign<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 边缘留空 上</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> marginTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 边缘留空 下</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> marginBottom <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 边缘留空 左</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> marginLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 边缘留空 右</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> marginRight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 渲染子节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> GameObject Child
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> item<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetItem</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 总个数</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> ChildCount
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> childCount<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetChildCount</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置显示窗口大小</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> Vector2 ViewPort
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> viewPort<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetViewPort</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        GameObject item<span class="token punctuation">;</span>
        ScrollRect scrollRect<span class="token punctuation">;</span>
        Vector2 viewPort<span class="token punctuation">;</span>
        RectTransform content<span class="token punctuation">;</span>
        Vector2 itemSize<span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Transform<span class="token operator">></span> items<span class="token punctuation">;</span>
        Dictionary<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> contains<span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> outOfContains<span class="token punctuation">;</span>
        <span class="token keyword">int</span> childCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//需要渲染的总数据个数</span>
        <span class="token keyword">int</span> scrollLineIndex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前第一个元素索引</span>
        <span class="token keyword">int</span> totalCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在UI中显示的个数(不乘以maxPerLine)</span>
        Vector2 startPos<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一个元素所在位置</span>
        <span class="token keyword">int</span> startIndex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前渲染起始坐标</span>
        <span class="token keyword">int</span> endIndex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前渲染结束坐标</span>
        <span class="token keyword">int</span> maxPerLine<span class="token punctuation">;</span>

        <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            maxPerLine <span class="token operator">=</span> maxPerLine <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> maxPerLine<span class="token punctuation">;</span>
            items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Transform<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            contains <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            outOfContains <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            scrollRect <span class="token operator">=</span> transform<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>ScrollRect<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            content <span class="token operator">=</span> scrollRect<span class="token punctuation">.</span>content<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"ScrollRect "</span> <span class="token operator">+</span> scrollRect<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" Has No Content, Please Check And Retry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            viewPort <span class="token operator">=</span> scrollRect<span class="token punctuation">.</span>viewport<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>size<span class="token punctuation">;</span>

            content<span class="token punctuation">.</span>anchorMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            content<span class="token punctuation">.</span>anchorMin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            content<span class="token punctuation">.</span>pivot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 当子节点、Mask、maxPerLine</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollRect <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> content <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token function">ResetChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Vector2 maskSize <span class="token operator">=</span> viewPort<span class="token punctuation">;</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Horizontal<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                count <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>x<span class="token operator">/</span>itemSize<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//横向列数</span>
                startPos <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
                startPos<span class="token punctuation">.</span>x <span class="token operator">=</span> marginLeft<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>verticalAlign <span class="token operator">==</span> VerticalAlign<span class="token punctuation">.</span>Top<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>marginTop<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>verticalAlign <span class="token operator">==</span> VerticalAlign<span class="token punctuation">.</span>Middle<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>y<span class="token operator">*</span><span class="token number">0.5f</span> <span class="token operator">-</span> <span class="token punctuation">(</span>itemSize<span class="token punctuation">.</span>y<span class="token operator">*</span>maxPerLine <span class="token operator">+</span> <span class="token punctuation">(</span>maxPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>rowSpace<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>verticalAlign <span class="token operator">==</span> VerticalAlign<span class="token punctuation">.</span>Bottom<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>y <span class="token operator">-</span> marginBottom <span class="token operator">-</span> itemSize<span class="token punctuation">.</span>y<span class="token operator">*</span>maxPerLine <span class="token operator">-</span> rowSpace<span class="token operator">*</span><span class="token punctuation">(</span>maxPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">//优化：不在一开始生产所有的可见格子</span>
                <span class="token comment" spellcheck="true">//for (int i = 0; i &lt; count; i++)</span>
                <span class="token comment" spellcheck="true">//{</span>
                <span class="token comment" spellcheck="true">//    for (int j = 0; j &lt; maxPerLine; j++)</span>
                <span class="token comment" spellcheck="true">//    {</span>
                <span class="token comment" spellcheck="true">//        RectTransform child = CreateItem(i*maxPerLine + j);</span>
                <span class="token comment" spellcheck="true">//        child.localPosition = startPos +</span>
                <span class="token comment" spellcheck="true">//                              new Vector2(i*itemSize.x + i*columuSpace, -j*itemSize.y - j*rowSpace);</span>
                <span class="token comment" spellcheck="true">//    }</span>
                <span class="token comment" spellcheck="true">//}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                count <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>y<span class="token operator">/</span>itemSize<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//竖向行数</span>
                startPos <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
                startPos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>marginTop<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重置开始节点位置</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontalAlign <span class="token operator">==</span> HorizontalAlign<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>x <span class="token operator">=</span> marginLeft<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontalAlign <span class="token operator">==</span> HorizontalAlign<span class="token punctuation">.</span>Middle<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>maskSize<span class="token punctuation">.</span>x<span class="token operator">*</span><span class="token number">0.5f</span> <span class="token operator">-</span> <span class="token punctuation">(</span>itemSize<span class="token punctuation">.</span>x<span class="token operator">*</span>maxPerLine <span class="token operator">+</span> <span class="token punctuation">(</span>maxPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>columuSpace<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontalAlign <span class="token operator">==</span> HorizontalAlign<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    startPos<span class="token punctuation">.</span>x <span class="token operator">=</span> maskSize<span class="token punctuation">.</span>x <span class="token operator">-</span> marginRight <span class="token operator">-</span> itemSize<span class="token punctuation">.</span>x<span class="token operator">*</span>maxPerLine <span class="token operator">-</span> columuSpace<span class="token operator">*</span><span class="token punctuation">(</span>maxPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment" spellcheck="true">//for (int i = 0; i &lt; count; i++)</span>
                <span class="token comment" spellcheck="true">//{</span>
                <span class="token comment" spellcheck="true">//    for (int j = 0; j &lt; maxPerLine; j++)</span>
                <span class="token comment" spellcheck="true">//    {</span>
                <span class="token comment" spellcheck="true">//        RectTransform child = CreateItem(i*maxPerLine + j);</span>
                <span class="token comment" spellcheck="true">//        child.localPosition = startPos +</span>
                <span class="token comment" spellcheck="true">//                              new Vector2(j*itemSize.x + j*columuSpace, -i*itemSize.y - i*rowSpace);</span>
                <span class="token comment" spellcheck="true">//    }</span>
                <span class="token comment" spellcheck="true">//}</span>
            <span class="token punctuation">}</span>
            totalCount <span class="token operator">=</span> count<span class="token punctuation">;</span>

            <span class="token function">SetChildCount</span><span class="token punctuation">(</span>childCount<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">BackTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            scrollRect<span class="token punctuation">.</span>onValueChanged<span class="token punctuation">.</span><span class="token function">RemoveAllListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            scrollRect<span class="token punctuation">.</span>onValueChanged<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>OnValueChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 列表滚动</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="vec">&lt;/param></span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnValueChanged</span><span class="token punctuation">(</span>Vector2 vec<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>arrangement<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">case</span> Arrangement<span class="token punctuation">.</span>Horizontal<span class="token punctuation">:</span>
                 <span class="token comment" spellcheck="true">//   if (vec.x &lt; 0.0f || vec.x >= 1.0f)</span>
                 <span class="token comment" spellcheck="true">//       return;</span>
                        vec<span class="token punctuation">.</span>x <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">:</span>
                 <span class="token comment" spellcheck="true">//   if (vec.y &lt;= 0.0f || vec.y >= 1.0f)</span>
                 <span class="token comment" spellcheck="true">//       return;</span>
                        vec<span class="token punctuation">.</span>y <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">int</span> curLineIndex <span class="token operator">=</span> <span class="token function">GetCurLineIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>curLineIndex <span class="token operator">!=</span> scrollLineIndex<span class="token punctuation">)</span>
                <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span>curLineIndex<span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 获取页面第一行索引</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">GetCurLineIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>arrangement<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">case</span> Arrangement<span class="token punctuation">.</span>Horizontal<span class="token punctuation">:</span>
                    <span class="token keyword">return</span>
                        Mathf<span class="token punctuation">.</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0.1f</span><span class="token operator">?</span> content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>x <span class="token punctuation">:</span> <span class="token number">0.1f</span> <span class="token operator">-</span> marginLeft<span class="token punctuation">)</span><span class="token operator">/</span>
                                         <span class="token punctuation">(</span>columuSpace <span class="token operator">+</span> itemSize<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">:</span>
                    <span class="token keyword">return</span>
                        Mathf<span class="token punctuation">.</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>y<span class="token operator">></span><span class="token operator">-</span><span class="token number">0.1f</span><span class="token operator">?</span>content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>y<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.1f</span> <span class="token operator">-</span> marginTop<span class="token punctuation">)</span><span class="token operator">/</span>
                                         <span class="token punctuation">(</span>rowSpace <span class="token operator">+</span> itemSize<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 更新数据（待修改问出现的才刷新）</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="curLineIndex">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="forceRender">&lt;/param></span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> curLineIndex<span class="token punctuation">,</span> <span class="token keyword">bool</span> forceRender<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>curLineIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            startIndex <span class="token operator">=</span> curLineIndex<span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            endIndex <span class="token operator">=</span> <span class="token punctuation">(</span>curLineIndex <span class="token operator">+</span> totalCount<span class="token punctuation">)</span><span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">>=</span> childCount<span class="token punctuation">)</span>
                endIndex <span class="token operator">=</span> childCount<span class="token punctuation">;</span>

            contains<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//渲染序号</span>
            outOfContains<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//items的索引</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果当前已渲染的item中包含</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> startIndex <span class="token operator">||</span> index <span class="token operator">>=</span> endIndex<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    outOfContains<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    contains<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// *************更改渲染****************</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>contains<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Transform child <span class="token operator">=</span> items<span class="token punctuation">[</span>outOfContains<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    outOfContains<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    child<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> row <span class="token operator">=</span> i<span class="token operator">/</span>maxPerLine<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> col <span class="token operator">=</span> i<span class="token operator">%</span>maxPerLine<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">)</span>
                        child<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> startPos <span class="token operator">+</span>
                                              <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>col<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token operator">*</span>columuSpace<span class="token punctuation">,</span>
                                                  <span class="token operator">-</span>row<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token operator">*</span>rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        child<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> startPos <span class="token operator">+</span>
                                              <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>row<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token operator">*</span>columuSpace<span class="token punctuation">,</span>
                                                  <span class="token operator">-</span>col<span class="token operator">*</span>itemSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token operator">*</span>rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    child<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>onItemRender <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token function">onItemRender</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>forceRender<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>onItemRender <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token function">onItemRender</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> items<span class="token punctuation">[</span>contains<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            scrollLineIndex <span class="token operator">=</span> curLineIndex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移除当前所有</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ResetChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> content<span class="token punctuation">.</span>childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Transform child <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                child<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 创建新节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="index">&lt;/param></span>
        <span class="token keyword">private</span> RectTransform <span class="token function">CreateItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Transform child<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>childCount <span class="token operator">></span> index<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                child <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                GameObject obj <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">Instantiate</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">as</span> GameObject<span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>localScale <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one<span class="token punctuation">;</span>
                child <span class="token operator">=</span> obj<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            child<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> child <span class="token keyword">as</span> RectTransform<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置资源</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="child">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetItem</span><span class="token punctuation">(</span>GameObject child<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> child<span class="token punctuation">;</span>
            RectTransform itemTrans <span class="token operator">=</span> child<span class="token punctuation">.</span>transform <span class="token keyword">as</span> RectTransform<span class="token punctuation">;</span>
            itemTrans<span class="token punctuation">.</span>pivot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            itemSize <span class="token operator">=</span> itemTrans<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">;</span>
            <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 更新需要渲染的个数</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="value">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetChildCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> forceRender<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> childCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> childCount <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>totalCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//还未初始化</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">></span> items<span class="token punctuation">.</span>Count <span class="token operator">&amp;&amp;</span> items<span class="token punctuation">.</span>Count <span class="token operator">&lt;</span> maxPerLine <span class="token operator">*</span> totalCount<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//当前格子数量少于应生成的数量</span>
                <span class="token keyword">int</span> count <span class="token operator">=</span> items<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
                <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token keyword">value</span> <span class="token operator">&lt;</span> maxPerLine<span class="token operator">*</span>totalCount <span class="token operator">?</span> <span class="token keyword">value</span> <span class="token punctuation">:</span> maxPerLine<span class="token operator">*</span>totalCount<span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> row <span class="token operator">=</span> i <span class="token operator">/</span> maxPerLine<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> col <span class="token operator">=</span> i <span class="token operator">%</span> maxPerLine<span class="token punctuation">;</span>
                    RectTransform child <span class="token operator">=</span> <span class="token function">CreateItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">)</span>
                        child<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> startPos <span class="token operator">+</span>
                                              <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>col <span class="token operator">*</span> itemSize<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token operator">*</span> columuSpace<span class="token punctuation">,</span>
                                                  <span class="token operator">-</span>row <span class="token operator">*</span> itemSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">*</span> rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        child<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> startPos <span class="token operator">+</span>
                                              <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>row <span class="token operator">*</span> itemSize<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">*</span> columuSpace<span class="token punctuation">,</span>
                                                  <span class="token operator">-</span>col <span class="token operator">*</span> itemSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token operator">*</span> rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> 

            <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> rc <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> childCount<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> maxPerLine<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置content的大小</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Horizontal<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>sizeDelta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>marginLeft <span class="token operator">+</span> marginRight <span class="token operator">+</span> itemSize<span class="token punctuation">.</span>x<span class="token operator">*</span>rc <span class="token operator">+</span> columuSpace<span class="token operator">*</span><span class="token punctuation">(</span>rc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    viewPort<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x <span class="token operator">></span> viewPort<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> viewPort<span class="token punctuation">.</span>x <span class="token operator">-</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
                    content<span class="token punctuation">.</span>anchoredPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>viewPort<span class="token punctuation">.</span>x <span class="token operator">-</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x<span class="token punctuation">,</span> content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>sizeDelta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>viewPort<span class="token punctuation">.</span>x<span class="token punctuation">,</span> marginTop <span class="token operator">+</span> marginBottom <span class="token operator">+</span> itemSize<span class="token punctuation">.</span>y<span class="token operator">*</span>rc <span class="token operator">+</span> rowSpace<span class="token operator">*</span><span class="token punctuation">(</span>rc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">></span> viewPort<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>y <span class="token operator">></span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">-</span> viewPort<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
                    content<span class="token punctuation">.</span>anchoredPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">.</span>x<span class="token punctuation">,</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">-</span> viewPort<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span><span class="token function">GetCurLineIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 添加子节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="index">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            startIndex <span class="token operator">=</span> scrollLineIndex<span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            endIndex <span class="token operator">=</span> <span class="token punctuation">(</span>scrollLineIndex <span class="token operator">+</span> totalCount<span class="token punctuation">)</span><span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            <span class="token function">SetChildCount</span><span class="token punctuation">(</span>childCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">>=</span> startIndex <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 删除子节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="index">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> childCount<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            startIndex <span class="token operator">=</span> scrollLineIndex<span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            endIndex <span class="token operator">=</span> <span class="token punctuation">(</span>scrollLineIndex <span class="token operator">+</span> totalCount<span class="token punctuation">)</span><span class="token operator">*</span>maxPerLine<span class="token punctuation">;</span>
            <span class="token function">SetChildCount</span><span class="token punctuation">(</span>childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">>=</span> startIndex <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置显示窗口大小(现在貌似可以废弃了)</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="port">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetViewPort</span><span class="token punctuation">(</span>Vector2 port<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> viewPort<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            viewPort <span class="token operator">=</span> port<span class="token punctuation">;</span>
            <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置行列最大</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="max">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetMaxPerLine</span><span class="token punctuation">(</span><span class="token keyword">int</span> max<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            maxPerLine <span class="token operator">=</span> max<span class="token punctuation">;</span>
            <span class="token function">ReBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 返回顶部</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">BackTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            content<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
            <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 返回底部</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">BackBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arrangement <span class="token operator">==</span> Arrangement<span class="token punctuation">.</span>Vertical<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>viewPort<span class="token punctuation">.</span>y <span class="token operator">+</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>viewPort<span class="token punctuation">.</span>x <span class="token operator">-</span> content<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> childCount<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> maxPerLine<span class="token punctuation">)</span> <span class="token operator">-</span> totalCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RefreshViewItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">UpdateRectItem</span><span class="token punctuation">(</span>scrollLineIndex<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetArrangement</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            arrangement <span class="token operator">=</span> <span class="token punctuation">(</span>Arrangement<span class="token punctuation">)</span> arr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetHorizontal</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            horizontalAlign <span class="token operator">=</span> <span class="token punctuation">(</span>HorizontalAlign<span class="token punctuation">)</span> h<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetVerticle</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            verticalAlign <span class="token operator">=</span> <span class="token punctuation">(</span>VerticalAlign<span class="token punctuation">)</span> v<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> UGUI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UGUI </tag>
            
            <tag> 无限列表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity Scene场景自定义坐标轴]]></title>
      <url>/2017/04/27/Unity%20Scene%E5%9C%BA%E6%99%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9D%90%E6%A0%87%E8%BD%B4/</url>
      <content type="html"><![CDATA[<p>多看看别人的代码是没有坏处的，即使学不了人家的大框架，偶尔拾起一些小东西也是可以的。<br>最近扒了一下DoTween(声明一下源码是自己反编译的，只为学习)，看见了如何在Scene场景中添加标注和坐标轴，具体做法是，在你的脚本Editor中，比如你重定义某个mono脚本的Inspector显示中，加入OnSceneGUI函数，使用Handles进行操作。</p>
<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">OnSceneGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_target<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">//allow path adjustment undo:  </span>
        Undo<span class="token punctuation">.</span><span class="token function">RecordObject</span><span class="token punctuation">(</span>_target<span class="token punctuation">,</span> <span class="token string">"Adjust Path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">//path begin and end labels:  </span>
        Handles<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span>_target<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"'"</span> <span class="token operator">+</span> _target<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"' Begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        Handles<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span>_target<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>_target<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"'"</span> <span class="token operator">+</span> _target<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"' End"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">//node handle display:  </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _target<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            _target<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Handles<span class="token punctuation">.</span><span class="token function">PositionHandle</span><span class="token punctuation">(</span>_target<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Quaternion<span class="token punctuation">.</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">!=</span> _target<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  
                Handles<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span>_target<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUI<span class="token punctuation">.</span>changed<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            EditorUtility<span class="token punctuation">.</span><span class="token function">SetDirty</span><span class="token punctuation">(</span>_target<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>代码很简单，只是记录方法而已，具体的效果：</p>
<p><img src="http://img.blog.csdn.net/20170427161523433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图片来源我的csdn"></p>
<p>给开始和结束点添加了一个label, 每个节点添加了一个坐标轴和一个序号。其中蓝色的线使用Gizmos画的，可自行度娘。</p>
]]></content>
      
        <categories>
            
            <category> UnityScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 坐标轴 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[屏幕区域点击检测]]></title>
      <url>/2017/04/17/%E5%B1%8F%E5%B9%95%E5%8C%BA%E5%9F%9F%E7%82%B9%E5%87%BB%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<p>此处直接代码：</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>


<span class="token keyword">namespace</span> Asstes<span class="token punctuation">.</span>UI
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Introduction: 屏幕区域点击判断</span>
    <span class="token comment" spellcheck="true">/// Author: </span>
    <span class="token comment" spellcheck="true">/// Time: </span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AreaClick</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> AreaClick m_instance<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> AreaClick Instance
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>m_instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    m_instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AreaClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">int</span> m_index<span class="token punctuation">;</span>
        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>AreaRect<span class="token operator">></span> m_rects<span class="token punctuation">;</span>
        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>AreaRect<span class="token operator">></span> m_removes<span class="token punctuation">;</span>
        <span class="token keyword">private</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_deletes<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">AreaClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            m_rects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>AreaRect<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_removes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>AreaRect<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_deletes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnClick<span class="token punctuation">,</span> OnClickScreen<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnEndLongPress<span class="token punctuation">,</span> OnClickScreen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnClickScreen</span><span class="token punctuation">(</span>Vector2 param<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_removes<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//移除已删除的点</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>m_deletes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>m_rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    m_removes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>m_rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_removes<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                m_rects<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>m_removes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            m_deletes<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                m_rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">OnClick</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 添加检测</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="area">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AddCheck</span><span class="token punctuation">(</span>AreaRect area<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            area<span class="token punctuation">.</span>id <span class="token operator">=</span> m_index<span class="token operator">++</span><span class="token punctuation">;</span>
            m_rects<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> area<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移除检测</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="id">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">CancelCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_deletes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
                m_deletes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AreaRect</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> Rect m_rect<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">bool</span> m_allNotice<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">bool</span> m_onlyOnce<span class="token punctuation">;</span>
        <span class="token keyword">private</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> m_callback<span class="token punctuation">;</span>
        <span class="token keyword">internal</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 是否只使用一次</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> UseOnce <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_onlyOnce<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> m_onlyOnce <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 普通构造函数</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="rect">在屏幕上的区域&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="allNotice">通知点中和未点中&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="callback">回调&lt;/param></span>
        <span class="token keyword">public</span> <span class="token function">AreaRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">,</span> <span class="token keyword">bool</span> allNotice<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> callback<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_rect <span class="token operator">=</span> rect<span class="token punctuation">;</span>
            m_allNotice <span class="token operator">=</span> allNotice<span class="token punctuation">;</span>
            m_callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 可缩放区域</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="rect">设计时所选区域，如UI设计时的rect&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="designSize">UI设计时屏幕分辨率&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="allNotice">通知点中和未点中&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="callback">回调&lt;/param></span>
        <span class="token keyword">public</span> <span class="token function">AreaRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">,</span> Vector2 designSize<span class="token punctuation">,</span> <span class="token keyword">bool</span> allNotice<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> callback<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">float</span> sx <span class="token operator">=</span> Screen<span class="token punctuation">.</span>width<span class="token operator">/</span>designSize<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
            <span class="token keyword">float</span> sy <span class="token operator">=</span> Screen<span class="token punctuation">.</span>height<span class="token operator">/</span>designSize<span class="token punctuation">.</span>y<span class="token punctuation">;</span>

            Rect newRect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                x <span class="token operator">=</span> rect<span class="token punctuation">.</span>x<span class="token operator">*</span>sx<span class="token punctuation">,</span>
                y <span class="token operator">=</span> rect<span class="token punctuation">.</span>y<span class="token operator">*</span>sy<span class="token punctuation">,</span>
                width <span class="token operator">=</span> rect<span class="token punctuation">.</span>width<span class="token operator">*</span>sx<span class="token punctuation">,</span>
                height <span class="token operator">=</span> rect<span class="token punctuation">.</span>height<span class="token operator">*</span>sy
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            m_rect <span class="token operator">=</span> newRect<span class="token punctuation">;</span>
            m_allNotice <span class="token operator">=</span> allNotice<span class="token punctuation">;</span>
            m_callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// UI区域</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="transform">RectTransform&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="allNotice">通知点中和未点中&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="callback">回调&lt;/param></span>
        <span class="token keyword">public</span> <span class="token function">AreaRect</span><span class="token punctuation">(</span>Transform transform<span class="token punctuation">,</span> <span class="token keyword">bool</span> allNotice<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> callback<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform rectTransform <span class="token operator">=</span> transform <span class="token keyword">as</span> RectTransform<span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变
            m_rect.center = rectTransform.position;*/</span> <span class="token comment" spellcheck="true">//没有考虑到中心点影响，center并非world position</span>

            <span class="token keyword">float</span> w <span class="token operator">=</span> rectTransform<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x <span class="token operator">*</span> rectTransform<span class="token punctuation">.</span>lossyScale<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消除缩放影响</span>
            <span class="token keyword">float</span> h <span class="token operator">=</span> rectTransform<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">*</span> rectTransform<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span>

            <span class="token keyword">float</span> x <span class="token operator">=</span> rectTransform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> rectTransform<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>x <span class="token operator">*</span> w<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//消除中心点并非pivot非（0.5，0.5）影响</span>
            <span class="token keyword">float</span> y <span class="token operator">=</span> rectTransform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> rectTransform<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>y <span class="token operator">*</span> h<span class="token punctuation">;</span>

            m_rect<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_rect<span class="token punctuation">.</span>width <span class="token operator">=</span> w<span class="token punctuation">;</span>
            m_rect<span class="token punctuation">.</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span>

            m_allNotice <span class="token operator">=</span> allNotice<span class="token punctuation">;</span>
            m_callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 是否在区域中</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="pos">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">IsContain</span><span class="token punctuation">(</span>Vector3 pos<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> m_rect<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnClick</span><span class="token punctuation">(</span>Vector2 pos<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsContain</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">m_callback</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>m_onlyOnce<span class="token punctuation">)</span>
                    AreaClick<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">CancelCheck</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m_allNotice<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">m_callback</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中InputManager是我自己实现的一个在多平台上判断点击事件的工具，</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnClick<span class="token punctuation">,</span> OnClickScreen<span class="token punctuation">)</span><span class="token punctuation">;</span>  
InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnEndLongPress<span class="token punctuation">,</span> OnClickScreen<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment" spellcheck="true">//可直接用</span>
Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 和  
Input<span class="token punctuation">.</span><span class="token function">GetTouch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>代替判断
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一个很平常的需求、点击空白处关闭界面，以前自己的做法是给它做个全透明的图片托底（当时自己也没有想其他方法），当判断到点击是图片后关闭。但最近时遇到一个不能用这个方法的，因为你不能遮住其他的UI点击事件，故写了个工具，并做了个小扩展，目前只支持矩形区域的硬检测。目前可用到所有的屏幕区域检测和RectTransform检测。</p>
<p>由于最近用到在拖动时，如果在某个区域则相应拖动事件，如果超过这个区域则停止移动，于是改了一下代码：</p>
<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>


<span class="token keyword">namespace</span> Assets<span class="token punctuation">.</span>UI
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Introduction: 屏幕区域点击移动判断</span>
    <span class="token comment" spellcheck="true">/// Author:         Cheng</span>
    <span class="token comment" spellcheck="true">/// Time: </span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AreaCheck</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> AreaCheck m_instance<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> AreaCheck Instance
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>m_instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    m_instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AreaCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> m_index<span class="token punctuation">;</span>
        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>AreaRect<span class="token operator">></span> m_rects<span class="token punctuation">;</span>
        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>AreaRect<span class="token operator">></span> m_removes<span class="token punctuation">;</span>
        <span class="token keyword">private</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_deletes<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">AreaCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            m_rects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>AreaRect<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_removes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>AreaRect<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_deletes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnTouchBegin<span class="token punctuation">,</span> OnTouchBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnMoveBegin<span class="token punctuation">,</span> OnMoveBrgin<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnMove<span class="token punctuation">,</span> OnMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnMoveEnd<span class="token punctuation">,</span> OnMoveEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnClick<span class="token punctuation">,</span> OnClickScreen<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InputManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>OnEndLongPress<span class="token punctuation">,</span> OnClickScreen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnTouchBegin</span><span class="token punctuation">(</span>Vector2 param<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_removes<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//移除已删除的点</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>m_deletes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>m_rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    m_removes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>m_rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_removes<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                m_rects<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>m_removes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            m_deletes<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnClickScreen</span><span class="token punctuation">(</span>Vector2 param<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                m_rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">OnClick</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnMoveBrgin</span><span class="token punctuation">(</span>Vector2 param<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                m_rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">OnMoveBegin</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnMove</span><span class="token punctuation">(</span>Vector2 param<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                m_rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">OnMove</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnMoveEnd</span><span class="token punctuation">(</span>Vector2 param<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                m_rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">OnMoveEnd</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**********因lua重载的callback只检测luafunction,改重载为重命名  T_T  ************************/</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AddClickCheckRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">,</span> <span class="token keyword">bool</span> noticeAll<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> callback<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AreaRect area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AreaRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                CheckClick <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
                ClickAllNotice <span class="token operator">=</span> noticeAll<span class="token punctuation">,</span>
                ClickCallback <span class="token operator">=</span> callback
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">AddCheck</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AddClickCheckResizeRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">,</span> Vector2 designSize<span class="token punctuation">,</span> <span class="token keyword">bool</span> noticeAll<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> callback<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AreaRect area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AreaRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> designSize<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                CheckClick <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
                ClickAllNotice <span class="token operator">=</span> noticeAll<span class="token punctuation">,</span>
                ClickCallback <span class="token operator">=</span> callback
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">AddCheck</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AddClickCheckTransform</span><span class="token punctuation">(</span>Transform transform<span class="token punctuation">,</span> <span class="token keyword">bool</span> noticeAll<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> callback<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AreaRect area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AreaRect</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                CheckClick <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
                ClickAllNotice <span class="token operator">=</span> noticeAll<span class="token punctuation">,</span>
                ClickCallback <span class="token operator">=</span> callback
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">AddCheck</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AddMoveCheckRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">,</span> <span class="token keyword">bool</span> outOnEnd<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> begin<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> move<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> end<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AreaRect area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AreaRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                CheckMove <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
                EndOnOut <span class="token operator">=</span> outOnEnd<span class="token punctuation">,</span>
                MoveBeginCallback <span class="token operator">=</span> begin<span class="token punctuation">,</span>
                MoveCallback <span class="token operator">=</span> move<span class="token punctuation">,</span>
                MoveEndCallback <span class="token operator">=</span> end
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">AddCheck</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AddMoveCheckResizeRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">,</span> Vector2 designSize<span class="token punctuation">,</span> <span class="token keyword">bool</span> outOnEnd<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> begin<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> move<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> end<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AreaRect area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AreaRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> designSize<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                CheckMove <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
                EndOnOut <span class="token operator">=</span> outOnEnd<span class="token punctuation">,</span>
                MoveBeginCallback <span class="token operator">=</span> begin<span class="token punctuation">,</span>
                MoveCallback <span class="token operator">=</span> move<span class="token punctuation">,</span>
                MoveEndCallback <span class="token operator">=</span> end
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">AddCheck</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AddMoveCheckTransform</span><span class="token punctuation">(</span>Transform transform<span class="token punctuation">,</span> <span class="token keyword">bool</span> outOnEnd<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> begin<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> move<span class="token punctuation">,</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> end<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AreaRect area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AreaRect</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                CheckMove <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
                EndOnOut <span class="token operator">=</span> outOnEnd<span class="token punctuation">,</span>
                MoveBeginCallback <span class="token operator">=</span> begin<span class="token punctuation">,</span>
                MoveCallback <span class="token operator">=</span> move<span class="token punctuation">,</span>
                MoveEndCallback <span class="token operator">=</span> end
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">AddCheck</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 添加检测</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="area">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token punctuation">[</span>LuaInterface<span class="token punctuation">.</span>NoToLua<span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AddCheck</span><span class="token punctuation">(</span>AreaRect area<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            area<span class="token punctuation">.</span>id <span class="token operator">=</span> m_index<span class="token operator">++</span><span class="token punctuation">;</span>
            m_rects<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> area<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移除检测</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="id">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">CancelCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_deletes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
                m_deletes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AreaRect</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> Rect m_rect<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">bool</span> moving<span class="token punctuation">;</span>
        <span class="token keyword">internal</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 鼠标移动时移除即结束</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> EndOnOut<span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 通知点中和未点中</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> ClickAllNotice <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 检测点击</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> CheckClick <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 检测移动</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> CheckMove <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 点击回调</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> ClickCallback<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移动结束回调</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> MoveBeginCallback<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移动回调</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> MoveCallback<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移动结束回调</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> Callback_1<span class="token operator">&lt;</span>Vector2<span class="token operator">></span> MoveEndCallback<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 普通构造函数</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="rect">在屏幕上的区域&lt;/param></span>
        <span class="token keyword">public</span> <span class="token function">AreaRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_rect <span class="token operator">=</span> rect<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 可缩放区域</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="rect">设计时所选区域，如UI设计时的rect&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="designSize">UI设计时屏幕分辨率&lt;/param></span>
        <span class="token keyword">public</span> <span class="token function">AreaRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">,</span> Vector2 designSize<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">float</span> sx <span class="token operator">=</span> Screen<span class="token punctuation">.</span>width<span class="token operator">/</span>designSize<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
            <span class="token keyword">float</span> sy <span class="token operator">=</span> Screen<span class="token punctuation">.</span>height<span class="token operator">/</span>designSize<span class="token punctuation">.</span>y<span class="token punctuation">;</span>

            Rect newRect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                x <span class="token operator">=</span> rect<span class="token punctuation">.</span>x<span class="token operator">*</span>sx<span class="token punctuation">,</span>
                y <span class="token operator">=</span> rect<span class="token punctuation">.</span>y<span class="token operator">*</span>sy<span class="token punctuation">,</span>
                width <span class="token operator">=</span> rect<span class="token punctuation">.</span>width<span class="token operator">*</span>sx<span class="token punctuation">,</span>
                height <span class="token operator">=</span> rect<span class="token punctuation">.</span>height<span class="token operator">*</span>sy
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            m_rect <span class="token operator">=</span> newRect<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// UI区域</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="transform">RectTransform&lt;/param></span>
        <span class="token keyword">public</span> <span class="token function">AreaRect</span><span class="token punctuation">(</span>Transform transform<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform rectTransform <span class="token operator">=</span> transform <span class="token keyword">as</span> RectTransform<span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变
            m_rect.center = rectTransform.position;*/</span> <span class="token comment" spellcheck="true">//没有考虑到中心点影响，center并非world position</span>

            <span class="token keyword">float</span> w <span class="token operator">=</span> rectTransform<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>x <span class="token operator">*</span> rectTransform<span class="token punctuation">.</span>lossyScale<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消除缩放影响</span>
            <span class="token keyword">float</span> h <span class="token operator">=</span> rectTransform<span class="token punctuation">.</span>sizeDelta<span class="token punctuation">.</span>y <span class="token operator">*</span> rectTransform<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span>

            <span class="token keyword">float</span> x <span class="token operator">=</span> rectTransform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> rectTransform<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>x <span class="token operator">*</span> w<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//消除中心点并非pivot非（0.5，0.5）影响</span>
            <span class="token keyword">float</span> y <span class="token operator">=</span> rectTransform<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> rectTransform<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span>y <span class="token operator">*</span> h<span class="token punctuation">;</span>

            m_rect<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_rect<span class="token punctuation">.</span>width <span class="token operator">=</span> w<span class="token punctuation">;</span>
            m_rect<span class="token punctuation">.</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 是否在区域中</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="pos">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">IsContain</span><span class="token punctuation">(</span>Vector3 pos<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> m_rect<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 区域点击检测</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="pos">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnClick</span><span class="token punctuation">(</span>Vector2 pos<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>CheckClick<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsContain</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ClickCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">ClickCallback</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ClickAllNotice <span class="token operator">&amp;&amp;</span> ClickCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">ClickCallback</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 开始移动</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="pos">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnMoveBegin</span><span class="token punctuation">(</span>Vector2 pos<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CheckMove<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsContain</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                moving <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>MoveBeginCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token function">MoveBeginCallback</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 区域移动检测</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="pos">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnMove</span><span class="token punctuation">(</span>Vector2 pos<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>moving <span class="token operator">||</span> <span class="token operator">!</span>CheckMove<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsContain</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>MoveCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token function">MoveCallback</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>EndOnOut<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    moving <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>MoveEndCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token function">MoveEndCallback</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>MoveCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token function">MoveCallback</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移动结束</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="pos">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnMoveEnd</span><span class="token punctuation">(</span>Vector2 pos<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>moving <span class="token operator">||</span> <span class="token operator">!</span>CheckMove<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>MoveEndCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token function">MoveEndCallback</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用方式现在直接调用AreaCheck的单例即可。</p>
]]></content>
      
        <categories>
            
            <category> UnityScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 区域检测 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[永远的主视图]]></title>
      <url>/2017/03/24/%E6%B0%B8%E8%BF%9C%E7%9A%84%E4%B8%BB%E8%A7%86%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>Unity中，X、Y、Z坐标轴分别对应左、上、前，摄像机人视觉的方向在Z轴上。所以，当我们从Z轴看物体看的是正反面，Y轴看的是上下面，X看的是左右面。<br>一个面片Quad只有四个顶点、两个三角形，我们从Z上看是矩形，但是从其他的两个方向上看我们是看不见的。而场景中烟花的粒子，一个正在旋转的黑洞等大都是一个面片，我们希望从任意角度看这个物体时它都和从正面看到的一样，怎么办呢？简单的想想有两种方法：<br>1，让面片永远的LookAt 摄像机（个人觉得有点Low）<br>2，使用Shader重绘顶点<br>3，没想…<br>现在说说关于2的实现。<br>如下面第一张图是我们正常的视觉，把物体的中心点设置为坐标的元点，从正前方看。当我们改变视线，从Z1向物体看去，把原来的坐标轴按照新的视线进行对应得到图2。现在我们的目的转换成求转换后坐标轴即可，把点转换成我们新构建的坐标空间。</p>
<p><img src="http://img.blog.csdn.net/20170324182224160?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图片来源我的csdn"><img src="http://img.blog.csdn.net/20170324182245707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图片来源我的csdn"></p>
<p>得到Z1是新的视觉方向，那么先预计一个大概的Y方向。如果新的Z1靠近原Y,那么我们估计他的新Y为(0,0,1),否则还当作(0,1,0)， 只要这两个向量是在同一个水平面上就行。然后通过向量的叉乘求得X1：<br>X1 = 预估Y1 x Z1;<br>再去求得准确的Y1:<br>Y1 = Z1 x X1;<br>得到改变后的坐标向量（X1,Y1,Z1），把模型上的坐标点距离我们选定的中心点的向量转换到新的坐标系中就可。</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">
<span class="token comment" spellcheck="true">// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'</span>

Shader <span class="token string">"Custom/MainView"</span> <span class="token punctuation">{</span>
    Properties <span class="token punctuation">{</span>
        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Albedo (RGB)"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    SubShader<span class="token punctuation">{</span>
        Tags<span class="token punctuation">{</span><span class="token string">"Queue"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token string">"IgnoreProject"</span><span class="token operator">=</span><span class="token string">"True"</span> <span class="token string">"DisableBatching"</span><span class="token operator">=</span><span class="token string">"True"</span><span class="token punctuation">}</span>
        Pass<span class="token punctuation">{</span>
            Tags<span class="token punctuation">{</span><span class="token string">"LightMode"</span><span class="token operator">=</span><span class="token string">"ForwardBase"</span><span class="token punctuation">}</span>

            ZWrite Off
            Blend SrcAlpha OneMinusSrcAlpha
            Cull Off

            CGPROGRAM
            <span class="token macro property">#<span class="token directive keyword">pragma</span> vertex vert</span>
            <span class="token macro property">#<span class="token directive keyword">pragma</span> fragment frag</span>
            <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"UnityCG.cginc"</span></span>

            fixed4 _Color<span class="token punctuation">;</span>
            sampler2D _MainTex<span class="token punctuation">;</span>

            <span class="token keyword">struct</span> a2v <span class="token punctuation">{</span>
                float4 vertex <span class="token operator">:</span> POSITION<span class="token punctuation">;</span>
                float4 texcoord <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">struct</span> v2f <span class="token punctuation">{</span>
                float4 pos <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>
                float2 uv <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            v2f <span class="token function">vert</span><span class="token punctuation">(</span>a2v v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                v2f o<span class="token punctuation">;</span>
                float3 center <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                float3 viewerPos <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>unity_WorldToObject<span class="token punctuation">,</span> <span class="token function">float4</span><span class="token punctuation">(</span>_WorldSpaceCameraPos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                float3 z1 <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>viewerPos <span class="token operator">-</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//视觉向量，新的Z1</span>
                <span class="token comment" spellcheck="true">//上方，模型的向上方向向量，和视觉方向垂直，当视觉方向接近垂直时设为世界坐标的水平方向</span>
                float3 y1 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>z1<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.999</span> <span class="token operator">?</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                float3 x1 <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> z1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//叉乘得垂直</span>
                y1 <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>z1<span class="token punctuation">,</span> x1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取准确的向上分量</span>

                float3 curVector <span class="token operator">=</span> v<span class="token punctuation">.</span>vertex<span class="token punctuation">.</span>xyz <span class="token operator">-</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前坐标向量</span>
                <span class="token comment" spellcheck="true">//向量在三个方向上的分量为最终坐标，相当于重构坐标轴</span>
                float3 newPos <span class="token operator">=</span> center <span class="token operator">+</span> x1 <span class="token operator">*</span> curVector<span class="token punctuation">.</span>x <span class="token operator">+</span> y1 <span class="token operator">*</span> curVector<span class="token punctuation">.</span>y <span class="token operator">+</span> z1 <span class="token operator">*</span> curVector<span class="token punctuation">.</span>z<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转化到新坐标系</span>
                o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>UNITY_MATRIX_MVP<span class="token punctuation">,</span> <span class="token function">float4</span><span class="token punctuation">(</span>newPos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                o<span class="token punctuation">.</span>uv <span class="token operator">=</span> v<span class="token punctuation">.</span>texcoord<span class="token punctuation">.</span>xy<span class="token punctuation">;</span>
                <span class="token keyword">return</span> o<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> i<span class="token punctuation">.</span>uv<span class="token punctuation">)</span> <span class="token operator">*</span> _Color<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            ENDCG
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    FallBack Off
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>DisableBatching的作用说过了，其他的都是满满的线性代数0.0<br><img src="http://img.blog.csdn.net/20170324183553383?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图片来源我的csdn"></p>
<p>可以看到当我们旋转从不同角度看时看到的基本上都是一样的。</p>
]]></content>
      
        <categories>
            
            <category> UnityShader </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[摇摆的小草——顶点动画]]></title>
      <url>/2017/03/23/%E6%91%87%E6%91%86%E7%9A%84%E5%B0%8F%E8%8D%89%E2%80%94%E2%80%94%E9%A1%B6%E7%82%B9%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>Shader 动画的主要点在坐标变换，代码：</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">
Shader <span class="token string">"Custom/Grass"</span> <span class="token punctuation">{</span>
    Properties <span class="token punctuation">{</span>
        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Grass Texture"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token function">_TimeScale</span> <span class="token punctuation">(</span><span class="token string">"Time Scale"</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>

    SubShader<span class="token punctuation">{</span>
        Tags<span class="token punctuation">{</span><span class="token string">"Queue"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Opaque"</span> <span class="token string">"IgnoreProject"</span><span class="token operator">=</span><span class="token string">"True"</span><span class="token punctuation">}</span>
        Pass<span class="token punctuation">{</span>
            Tags<span class="token punctuation">{</span><span class="token string">"LightMode"</span><span class="token operator">=</span><span class="token string">"ForwardBase"</span><span class="token punctuation">}</span>

            ZWrite Off
            Blend SrcAlpha OneMinusSrcAlpha
            Cull Off

            CGPROGRAM
            <span class="token macro property">#<span class="token directive keyword">pragma</span> vertex vert</span>
            <span class="token macro property">#<span class="token directive keyword">pragma</span> fragment frag</span>
            <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"UnityCG.cginc"</span> </span>

            sampler2D _MainTex<span class="token punctuation">;</span>
            half _TimeScale<span class="token punctuation">;</span>

            <span class="token keyword">struct</span> a2v <span class="token punctuation">{</span>
                float4 vertex <span class="token operator">:</span> POSITION<span class="token punctuation">;</span>
                float4 texcoord <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">struct</span> v2f <span class="token punctuation">{</span>
                float4 pos <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>
                float2 uv <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>


            v2f <span class="token function">vert</span><span class="token punctuation">(</span>a2v v<span class="token punctuation">)</span><span class="token punctuation">{</span>
                v2f o<span class="token punctuation">;</span>
                float4 offset <span class="token operator">=</span> <span class="token function">float4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                offset<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">3.1416</span> <span class="token operator">*</span> _Time<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token function">clamp</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>texcoord<span class="token punctuation">.</span>y<span class="token number">-0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">*</span> _TimeScale<span class="token punctuation">;</span>
                o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>UNITY_MATRIX_MVP<span class="token punctuation">,</span> v<span class="token punctuation">.</span>vertex <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                o<span class="token punctuation">.</span>uv <span class="token operator">=</span> v<span class="token punctuation">.</span>texcoord<span class="token punctuation">.</span>xy<span class="token punctuation">;</span>
                <span class="token keyword">return</span> o<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target<span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> i<span class="token punctuation">.</span>uv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            ENDCG
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    FallBack Off
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Shader中设置渲染队列为 Transparent， 如果需要batch场景中模型的话需要在 Tags 中加上 “DisableBatching=True”， 不允许批处理。<br>关闭深度写入 Zwrite off。 关闭剔除，渲染双面Cull Off。开启混合为了显示透明 Blend SrcAlpha OneMinusSrcAlpha。</p>
<p>vertex函数中， 必须把坐标转换成视觉空间， 所以我们把操作就集中在这里，我的想法是：<br>草是延 Y 轴生长的， 而且根不能动。所以，在判断当前的坐标有两种情况：<br>1， 如果 y 坐标靠近 0 时，我们认为他是根部，根部不需要改变。<br>2， 其他高度， y  需要沿着某个方向做来回的摇摆pingpong运动。</p>
<p><img src="http://img.blog.csdn.net/20170323164133449?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图片来源我的csdn"></p>
<p>当把根部看做原点，草的运动可以当成正弦函数， 取坐标距离底部的距离做一个限制，使底部摆动小clamp(v.texcoord.y-0.5, 0, 1)。 clamp(x, a, b) 的作用时当 x&lt; a时 x=a， 当x &gt; b 时 x=b。<br>我们做一个x方向的偏移（也可以z），sin(3.1416 <em> _Time.y </em> clamp(v.texcoord.y-0.5, 0, 1))， _Time是一个时间变化量，最后在乘上一个我们偏移的最大距离 _TimeScale即可。<br>最后，把SV_POSITION寄存器中的坐标设置为原本的坐标vertex 加上便宜坐标offset 后的转换。</p>
<p><img src="http://img.blog.csdn.net/20170323165203481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图片来源我的csdn"></p>
]]></content>
      
        <categories>
            
            <category> UnityShader </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[统一管理技能及物品cd]]></title>
      <url>/2017/03/20/%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E5%8F%8A%E7%89%A9%E5%93%81cd/</url>
      <content type="html"><![CDATA[<p>有个需求，比如使用过物品以后， 技能后以一个cd时间，要求技能面板上和技能栏以及其他一切有可以使用该技能的地方做一个同步cd，因此有下面的管理模块。</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">.</span>UI<span class="token punctuation">;</span>


<span class="token keyword">namespace</span> Assets<span class="token punctuation">.</span>UI
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Introduction: CD 统一管理类,实现多个cd同动</span>
    <span class="token comment" spellcheck="true">/// Author: Cheng</span>
    <span class="token comment" spellcheck="true">/// Time: </span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CDManager</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> CDMask<span class="token operator">></span> m_cds<span class="token punctuation">;</span> 
        <span class="token keyword">private</span> <span class="token keyword">static</span> CDManager instance<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> CDManager Instance
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CDManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token function">CDManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_cds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> CDMask<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 添加CD</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="_id">标识符&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="_image">cd图片&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="_cd">cd时长&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> CDMask <span class="token function">AddCD</span><span class="token punctuation">(</span><span class="token keyword">string</span> _id<span class="token punctuation">,</span> Image _image<span class="token punctuation">,</span> <span class="token keyword">float</span> _cd<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            CDMask mask<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_cds<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>_id<span class="token punctuation">,</span> <span class="token keyword">out</span> mask<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                mask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CDMask</span><span class="token punctuation">(</span>_cd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                m_cds<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>_id<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            mask<span class="token punctuation">.</span><span class="token function">AddMask</span><span class="token punctuation">(</span>_image<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> mask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移除CD</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="_id">标识符&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="_image">cd图片&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveCD</span><span class="token punctuation">(</span><span class="token keyword">string</span> _id<span class="token punctuation">,</span> Image _image<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            CDMask mask<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_cds<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>_id<span class="token punctuation">,</span> <span class="token keyword">out</span> mask<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                mask<span class="token punctuation">.</span><span class="token function">RemoveMask</span><span class="token punctuation">(</span>_image<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 获取cd管理项</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="_id">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> CDMask <span class="token function">GetCDMask</span><span class="token punctuation">(</span><span class="token keyword">string</span> _id<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_cds<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> m_cds<span class="token punctuation">[</span>_id<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CDMask</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Image<span class="token operator">></span> m_imageList<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//同一cd列表</span>
        <span class="token keyword">private</span> <span class="token keyword">float</span> m_cd<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cd时间</span>
        <span class="token keyword">private</span> <span class="token keyword">float</span> m_amount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前amount</span>
        <span class="token keyword">private</span> <span class="token keyword">bool</span> m_inCD<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否在cd中</span>
        <span class="token keyword">private</span> <span class="token keyword">float</span> m_interval<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次变化时间间隔</span>
        <span class="token keyword">private</span> <span class="token keyword">float</span> m_perAmount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次变化量</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 填充比率</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> fillAmount <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_amount<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetAmount</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// cd时长</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">float</span> cd <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_cd<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> <span class="token function">SetCD</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// cd开始和结束事件</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token keyword">public</span> <span class="token keyword">event</span> Callback_1<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> cdStateChanged<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">CDMask</span><span class="token punctuation">(</span><span class="token keyword">float</span> _cd<span class="token punctuation">,</span> <span class="token keyword">float</span> _interval <span class="token operator">=</span> <span class="token number">0.1f</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_imageList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Image<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_interval <span class="token operator">=</span> _interval<span class="token punctuation">;</span>
            cd <span class="token operator">=</span> _cd<span class="token punctuation">;</span>
            m_amount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            m_inCD <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
            fillAmount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置填充比率</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="a">比率，范围【0-1】&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetAmount</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_amount <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp01</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m_imageList<span class="token punctuation">.</span>Count<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>m_imageList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    m_imageList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> m_amount<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_amount <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>m_inCD<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当前不在cd中且cd>0则开始cd</span>
            <span class="token punctuation">{</span>
                Scheduler<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">RepeatCall</span><span class="token punctuation">(</span>m_interval<span class="token punctuation">,</span> UpdateAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                m_inCD <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cdStateChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token function">cdStateChanged</span><span class="token punctuation">(</span>m_inCD<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m_amount <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m_inCD<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//cd结束</span>
            <span class="token punctuation">{</span>
                Scheduler<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">CancelCallback</span><span class="token punctuation">(</span>UpdateAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                m_inCD <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cdStateChanged <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token function">cdStateChanged</span><span class="token punctuation">(</span>m_inCD<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">UpdateAmount</span><span class="token punctuation">(</span><span class="token keyword">float</span> dt<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">SetAmount</span><span class="token punctuation">(</span>m_amount <span class="token operator">-</span> m_perAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置整体的cd时长</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="_cd">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetCD</span><span class="token punctuation">(</span><span class="token keyword">float</span> _cd<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_cd <span class="token operator">=</span> _cd<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_interval <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                m_perAmount <span class="token operator">=</span> m_cd<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> t <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>_cd <span class="token operator">/</span> m_interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
                m_perAmount <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> t<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 获取当前是否在cd中</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">GetCDState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> m_inCD<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 设置Tick时长，默认0.1</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="interval">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetInterval</span><span class="token punctuation">(</span><span class="token keyword">float</span> interval<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_interval <span class="token operator">=</span> interval<span class="token punctuation">;</span>
            <span class="token function">SetCD</span><span class="token punctuation">(</span>m_cd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 添加cd</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="_image">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddMask</span><span class="token punctuation">(</span>Image _image<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_image<span class="token punctuation">.</span>type <span class="token operator">!=</span> Image<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Filled<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果当前不是填充模式则改为顶部转圈</span>
            <span class="token punctuation">{</span>
                _image<span class="token punctuation">.</span>type <span class="token operator">=</span> Image<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Filled<span class="token punctuation">;</span>
                _image<span class="token punctuation">.</span>fillMethod <span class="token operator">=</span> Image<span class="token punctuation">.</span>FillMethod<span class="token punctuation">.</span>Radial360<span class="token punctuation">;</span>
                _image<span class="token punctuation">.</span>fillOrigin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Image<span class="token punctuation">.</span>Origin360<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>
                _image<span class="token punctuation">.</span>fillClockwise <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m_imageList<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>_image<span class="token punctuation">)</span><span class="token punctuation">)</span>
                m_imageList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>_image<span class="token punctuation">)</span><span class="token punctuation">;</span>
            _image<span class="token punctuation">.</span>fillAmount <span class="token operator">=</span> m_amount<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移除cd</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="_image">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveMask</span><span class="token punctuation">(</span>Image _image<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_imageList<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>_image<span class="token punctuation">)</span><span class="token punctuation">)</span>
                m_imageList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>_image<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 其中， Scheduler.Instance.RepeatCall是一个计时器回调，可以在Update里做相应的计时替换，每次更新调用的时长为m_internal。<br>使用方式为</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">cdItem <span class="token operator">=</span> CDManager<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">AddCD</span><span class="token punctuation">(</span><span class="token string">"Key"</span><span class="token punctuation">,</span> images<span class="token punctuation">,</span> cdtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用相同的cd则直接把key设置相同即可，通过返回的cdItem进行其他的操作。<br><img src="http://img.blog.csdn.net/20170320160355897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图片来源我的csdn"></p>
<p>得到结果所有编号1的cd转动相同，2的也相同。</p>
]]></content>
      
        <categories>
            
            <category> UnityScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> cd管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity中使用c++]]></title>
      <url>/2017/03/13/Unity%E4%B8%AD%E4%BD%BF%E7%94%A8c++/</url>
      <content type="html"><![CDATA[<p>Unity具有跨平台特性，所以一般若是要使用c++分为四种情况：Windows、Android、MacOS以及IOS，对应使用生成的库文件后缀分别为”.dll”、”.so”、”.bundle”、”.a”；</p>
<h2 id="库文件生成"><a href="#库文件生成" class="headerlink" title="库文件生成"></a>库文件生成</h2><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><p>在Windows下生成dll的方式非常简单，一般来说，对我们这种写代码的来说都会安装vs，直接在vs中新建相应的类库，然后添加你需要的cpp文件和头文件即可。我试了此种方法，但是用vs生成的会包含一些我不需要的头文件等，而我又类似于有洁癖，不想在我需要的代码之外看见其他的，并且，我懒得去除0.0 所以换了一种生成方式——CMake。<br>度娘了一下使用方法，各种分文件夹、各种list文件，一阵头疼。我需要编译的文件不多，也就五六个“cpp”，六七个“.h”，所以直接放在了一个文件夹下。层级为：</p>
<pre><code>Root——bin //放置生成dll  
    |— build//放置cmake生成的工程  
    |— lib//放置源码  
          |—|—CmakeLists.txt  
    |— CMakeLists.txt  
</code></pre><p>Root下CMakeLists.txt的写法：</p>
<pre><code>cmake_minimum_required(VERSION3.0)  
PROJECT (Your_Project_Name)  
ADD_SUBDIRECTORY(lib)
</code></pre><p> 第一行版本，第二行设置自己的工程名，第三行加入lib。</p>
<p>Lib下CmakeLists.txt的写法：</p>
<pre class="line-numbers language-bash"><code class="language-bash">    set<span class="token punctuation">(</span>PROJECT_NAME<span class="token string">" Your_Project_Name "</span><span class="token punctuation">)</span>  
    SET<span class="token punctuation">(</span>SRC  
        ****.cpp<span class="token comment" spellcheck="true">#多个cpp文件按此方式写  </span>
        ****.cpp  
        ****.cpp<span class="token punctuation">)</span>  
        ADD_LIBRARY<span class="token punctuation">(</span><span class="token variable">${PROJECT_NAME}</span> SHARED <span class="token variable">${SRC}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#想得到动态库，参数就是SHARED  </span>
        <span class="token function">install</span> <span class="token punctuation">(</span>  
                 TARGETS           <span class="token variable">${PROJECT_NAME}</span>  
                 DESTINATION<span class="token string">"../bin"</span>  
                 <span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着，打开提前安装的cmake工具（cmake-gui），选择Source Code为Root, binaries选择build，点击左下角Configure按钮，如果出现“CMAKE_INSTALL_PREFIX”最好还是选择Root吧，然后，选择左下角的Generate按钮，Done完之后在build文件夹下用VS打开一个“vcxproj”文件，右键在相应的项目上生成就可以得到DLL。</p>
<h3 id="SO"><a href="#SO" class="headerlink" title="SO"></a>SO</h3><p>.so文件用于安卓上，所以我们使用Android NDK来编译。在Windows上编译我的环境为ndk+Cygwin，亲自在虚拟机Linux上只需要下载相应的ndk即可。具体的安装配置步骤找度娘即可。<br>NDK编译首先需要编写Android.mk文件，具体编写为:</p>
<pre class="line-numbers language-bash"><code class="language-bash">     LOCAL_PATH:<span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>call my-dir<span class="token variable">)</span></span>  

    include <span class="token variable"><span class="token variable">$(</span>CLEAR_VARS<span class="token variable">)</span></span>  

    LOCAL_MODULE    :<span class="token operator">=</span> Your_Project_Name  
    LOCAL_SRC_FILES :<span class="token operator">=</span> \  
    ****.cpp \  
    ****.cpp \  
    ****.cpp \  
    ****.cpp  

    APP_STL :<span class="token operator">=</span> stlport_static  
    include <span class="token variable"><span class="token variable">$(</span>BUILD_SHARED_LIBRARY<span class="token variable">)</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 以上指令只看名字也能猜出大概的意思，把所有源文件和mk文件放在一个文件夹下，下一步就是直接编译了，先切换到指定的目录，CygWin执行指令：$NDK_ROOT/ndk-build，结果并不是我所需要的，提示为：No Such File or Directy #include<vector></vector></p>
<p>因为我的源文件用了系统的类库，但是在此并没找到，Google说要加上一句:</p>
<pre class="line-numbers language-bash"><code class="language-bash">    APP_STL :<span class="token operator">=</span>stlport_static
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然并卵！又试了N中网上盛传的解决方案都没卵用。然后我就看看ndk自带的demo，模仿着又在文件夹下添加了一个Application.mk</p>
<pre class="line-numbers language-bash"><code class="language-bash">APP_PLATFORM :<span class="token operator">=</span> android-9  
APP_ABI :<span class="token operator">=</span> all  
APP_STL :<span class="token operator">=</span> stlport_static
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>还有由于很多安全限制，许多函数的接口上，必须用“const”修饰，一般你在vs上是不会报错的…在此会提示：Error: No much function for call <em>*</em><br> __int64在linux下也会有问题，要改成相应的。<br>………一大堆vs下没有的bug来袭…<br>然后，没有然后了，就是执行成功了，恭喜你获得.so文件一个。<br>（另，在linux下，源文件必须放在小写的jni目录下，否则不识别，我也不造为什么0.0）</p>
<h3 id="bundle"><a href="#bundle" class="headerlink" title="bundle"></a>bundle</h3><p>复制你使用ndk时修改的那一大堆在Windows下不会报错但Android下一大波bug的源文件到你的mac下，使用XCode新建一个MacOS下的bundle项目，代码添加进去，直接build即可。</p>
<h3 id="a"><a href="#a" class="headerlink" title="a"></a>a</h3><p>使用方式同bundle，在iOS下选择 Cocoa TouchStatic Library 新建，然后拷贝代码，执行，获得.a。</p>
<h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><p>另，导出dll时， 在要导出的头文件下首先添加</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once  </span>
<span class="token macro property">#<span class="token directive keyword">define</span> DllExport  extern "C" __declspec( dllexport )</span><span class="token comment" spellcheck="true">//宏定义,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后， 在需要导出的类或方法前，添加 <strong>DLLExport</strong>，类似：</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">DllExport MyClass <span class="token operator">*</span> <span class="token function">NewMyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//导出一个方法</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>而在除了dll的其他导出上， 不需要以上的定义， 而是在需要导出的类或函数前后做如下的定义写法</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once  </span>
<span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus  </span>
<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">{</span>  
<span class="token macro property">#<span class="token directive keyword">endif</span>  </span>

<span class="token comment" spellcheck="true">//要导出的函数或类  </span>

<span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus  </span>
<span class="token punctuation">}</span>  
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在Unity中创建文件夹“Plugins”，</p>
<p>###直接把把dll扔进去即可，或者创建个“x86_64”的文件夹装dll。</p>
<p>###在该文件夹下创建Android/Libs，把生成的armeabi-v7a和x86两个文件夹拷贝进来即可。</p>
<p>###在该文件夹下创建IOS文件夹，把.a放进去</p>
<p>###bundle文件同dll一样处理</p>
<p>###代码</p>
<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">const</span> <span class="token keyword">string</span> DLL_NAME<span class="token operator">=</span><span class="token string">"*****"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//android和ios下类库前会自动加lib的，但此处我们用的是不写的</span>
<span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span>DLL_NAME<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> IntPtr <span class="token function">Methord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IntPtr用来接收指针</span>
<span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span>DLL_NAME<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">M1</span><span class="token punctuation">(</span>IntPtrpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span>DLL_NAME<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">M2</span><span class="token punctuation">(</span>IntPtr path<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token operator">=</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>导出使用全都类似这样。接着你只需要直接在unity中使用就可以了。</p>
]]></content>
      
        <categories>
            
            <category> UnityScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XML 解析生成工具]]></title>
      <url>/2017/03/01/XML%20%E8%A7%A3%E6%9E%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>轻量级的XML解析生成工具，具体使用如注释。</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">
<span class="token keyword">using</span> System<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*----------------------------------------------------------------
// Copyright (C) 2017
//
// 模块名：轻量级XML工具
// 创建者：Cheng
// 修改者列表：
// 创建日期：2/28/2017
// 模块描述：
//----------------------------------------------------------------*/</span>
<span class="token keyword">namespace</span> Garson
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XML</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> XmlNode root<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">XML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token function">XML</span><span class="token punctuation">(</span><span class="token keyword">string</span> xml<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">Parse</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 从根节点获取Element</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="path">路径，eg:"Root/Node/Element"&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> XmlNode <span class="token function">GetElement</span><span class="token punctuation">(</span><span class="token keyword">string</span> path<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paths <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paths<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">GetElement</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 在指定节点下插入新元素</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="path">如果path为空则插入在根节点&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="name">新节点名称&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> XmlNode <span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token keyword">string</span> path<span class="token punctuation">,</span> <span class="token keyword">string</span> name<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                XmlNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlNode</span> <span class="token punctuation">{</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span><span class="token punctuation">;</span>
                root<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> node<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">var</span> parent <span class="token operator">=</span> <span class="token function">GetElement</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Error: Cannot find path:"</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                XmlNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                node<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
                parent<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> node<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 在指定路径下插入新节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="path">如果路径不存在，会创建相应的节点&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="name">新节点名称&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> XmlNode <span class="token function">AddNodeIgnorePath</span><span class="token punctuation">(</span><span class="token keyword">string</span> path<span class="token punctuation">,</span> <span class="token keyword">string</span> name<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paths <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paths<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">var</span> c <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">GetElement</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                    p<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                p <span class="token operator">=</span> c<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 添加属性</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="path">该路径下的节点&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="key">属性名&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="value">属性值&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">AddAttribute</span><span class="token punctuation">(</span><span class="token keyword">string</span> path<span class="token punctuation">,</span> <span class="token keyword">string</span> key<span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">GetElement</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span><span class="token function">AddAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">string</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 把XML转化成字符串</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">var</span> elements <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">GetElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> element <span class="token keyword">in</span> elements<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">BuildString</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">,</span> element<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 递归调用</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="stringBuilder">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="element">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="tab">每行前加制表符个数&lt;/param></span>
        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">BuildString</span><span class="token punctuation">(</span>StringBuilder stringBuilder<span class="token punctuation">,</span> XmlNode element<span class="token punctuation">,</span> <span class="token keyword">int</span> tab<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tab<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">HasAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> attrs <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> attrs<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"=\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>attrs<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">HasChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> childern <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> child <span class="token keyword">in</span> childern<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">BuildString</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">,</span> child<span class="token punctuation">,</span> tab<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tab<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">"&lt;/"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">"&lt;/"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">" />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">char</span> LT <span class="token operator">=</span> <span class="token string">'&lt;'</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">char</span> GT <span class="token operator">=</span> <span class="token string">'>'</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">char</span> DASH <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">char</span> SPACE <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">char</span> QUOTE <span class="token operator">=</span> <span class="token string">'"'</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">char</span> SLASH <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">char</span> QMARK <span class="token operator">=</span> <span class="token string">'?'</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">char</span> EQUALS <span class="token operator">=</span> <span class="token string">'='</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">char</span> EXCLAMATION <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">enum</span> ElementType
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 元标签</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            METATAG<span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 注释</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            COMMENT<span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 声明</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            DOCTYPE<span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 字符数据</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            CDATA<span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">/// &lt;summary></span>
            <span class="token comment" spellcheck="true">/// 空</span>
            <span class="token comment" spellcheck="true">/// &lt;/summary></span>
            NONE<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// Xml解析，会覆盖已存在的XML</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="xml">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token keyword">string</span> xml<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            xml <span class="token operator">=</span> xml<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            ElementType cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>

            <span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//current char</span>
            <span class="token keyword">char</span> cp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c previous</span>
            <span class="token keyword">char</span> cn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c next</span>
            <span class="token keyword">char</span> cnn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// c next next</span>
            Stack<span class="token operator">&lt;</span>XmlNode<span class="token operator">></span> xmlStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>XmlNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            xmlStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> length <span class="token operator">=</span> xml<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
            <span class="token keyword">bool</span> collectingName <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
            <span class="token keyword">bool</span> collectingAttribute <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
            <span class="token keyword">string</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token keyword">string</span> attr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                c <span class="token operator">=</span> cp <span class="token operator">=</span> cn <span class="token operator">=</span> cnn <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
                c <span class="token operator">=</span> xml<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> cp <span class="token operator">=</span> xml<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> cn <span class="token operator">=</span> xml<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> cnn <span class="token operator">=</span> xml<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>cType <span class="token operator">==</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> LT<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlStack<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// top ele's text eg.&lt;aa>****&lt;/aa></span>
                            <span class="token punctuation">{</span>
                                <span class="token keyword">var</span> node <span class="token operator">=</span> xmlStack<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                node<span class="token punctuation">.</span>text <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                        name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cn <span class="token operator">==</span> QMARK<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&lt;?*****?></span>
                        <span class="token punctuation">{</span>
                            cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>METATAG<span class="token punctuation">;</span>
                            i<span class="token operator">++</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cn <span class="token operator">==</span> EXCLAMATION <span class="token operator">&amp;&amp;</span> cnn <span class="token operator">==</span> DASH<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&lt;!--></span>
                        <span class="token punctuation">{</span>
                            cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>COMMENT<span class="token punctuation">;</span>
                            i<span class="token operator">++</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cn <span class="token operator">==</span> EXCLAMATION<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&lt;![[*******></span>
                        <span class="token punctuation">{</span>
                            cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>DOCTYPE<span class="token punctuation">;</span>
                            i<span class="token operator">++</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cn <span class="token operator">==</span> SLASH<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&lt;/***></span>
                        <span class="token punctuation">{</span>
                            cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>CDATA<span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token comment" spellcheck="true">//create new</span>
                        cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>CDATA<span class="token punctuation">;</span>
                        collectingName <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
                        collectingAttribute <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
                        name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                        attr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                        XmlNode xmlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlStack<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">var</span> parent <span class="token operator">=</span> xmlStack<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            parent<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span>xmlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        xmlStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>xmlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        name <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>cType <span class="token operator">==</span> ElementType<span class="token punctuation">.</span>METATAG<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> QMARK <span class="token operator">&amp;&amp;</span> cn <span class="token operator">==</span> GT<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        i<span class="token operator">++</span><span class="token punctuation">;</span>
                        cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cType <span class="token operator">==</span> ElementType<span class="token punctuation">.</span>COMMENT<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> DASH <span class="token operator">&amp;&amp;</span> cn <span class="token operator">==</span> DASH <span class="token operator">&amp;&amp;</span> cnn <span class="token operator">==</span> GT<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                        cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cType <span class="token operator">==</span> ElementType<span class="token punctuation">.</span>DOCTYPE<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> GT<span class="token punctuation">)</span> cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>cType <span class="token operator">==</span> ElementType<span class="token punctuation">.</span>CDATA<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>collectingName<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> SPACE <span class="token operator">||</span> c <span class="token operator">==</span> GT<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">var</span> node <span class="token operator">=</span> xmlStack<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">{</span>
                                node<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                collectingName <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
                                name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> GT<span class="token punctuation">)</span>
                            <span class="token punctuation">{</span>
                                cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>
                                <span class="token keyword">continue</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>

                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> SLASH <span class="token operator">&amp;&amp;</span> cn <span class="token operator">==</span> GT<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">var</span> node <span class="token operator">=</span> xmlStack<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            node<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            collectingName <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
                            cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>
                            name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                            i<span class="token operator">++</span><span class="token punctuation">;</span>

                            xmlStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> EQUALS<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>cn <span class="token operator">==</span> QUOTE<span class="token punctuation">)</span>
                            <span class="token punctuation">{</span>
                                collectingName <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
                                collectingAttribute <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
                                attr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                                i<span class="token operator">++</span><span class="token punctuation">;</span>
                                <span class="token keyword">continue</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token keyword">else</span>
                                Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Error: Attribute '\"' is not near '=' in char index:"</span> <span class="token operator">+</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span>
                        <span class="token punctuation">{</span>
                            name <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>collectingAttribute<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> QUOTE<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            collectingAttribute <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
                            <span class="token keyword">var</span> node <span class="token operator">=</span> xmlStack<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            node<span class="token punctuation">.</span><span class="token function">AddAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                            attr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span>
                        <span class="token punctuation">{</span>
                            attr <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> SPACE<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> GT<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> SLASH <span class="token operator">&amp;&amp;</span> cn <span class="token operator">==</span> GT<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>
                            xmlStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            i<span class="token operator">++</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> SLASH<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                            <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>xml<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> GT<span class="token punctuation">)</span>
                                <span class="token punctuation">{</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                                <span class="token keyword">else</span>
                                <span class="token punctuation">{</span>
                                    name <span class="token operator">+</span><span class="token operator">=</span> xml<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>

                            <span class="token keyword">var</span> node <span class="token operator">=</span> xmlStack<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">{</span>
                                xmlStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token keyword">else</span>
                            <span class="token punctuation">{</span>
                                Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Error: current is /, name is "</span><span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", but top node name is "</span><span class="token operator">+</span> node<span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            i <span class="token operator">=</span> j<span class="token punctuation">;</span>
                            cType <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>
                            name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        name <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>
                        collectingName <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlNode</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">string</span> text <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">string</span> name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>XmlNode<span class="token operator">></span> children<span class="token punctuation">;</span>
        <span class="token keyword">private</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> attributes<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">XmlNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>XmlNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            attributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            name <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
            text <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">HasChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> children<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">HasAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> attributes<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddChild</span><span class="token punctuation">(</span>XmlNode child<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 移除子节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="index">从0开始的下标&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> XmlNode <span class="token function">RemoveChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>Count <span class="token operator">></span> index<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">var</span> node <span class="token operator">=</span> children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
                children<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> node<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 添加属性，已存在则会覆盖</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="key">&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="value">&lt;/param></span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddAttribute</span><span class="token punctuation">(</span><span class="token keyword">string</span> key<span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                attributes<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                attributes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveAttribute</span><span class="token punctuation">(</span><span class="token keyword">string</span> key<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            attributes<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/// &lt;summary></span>
        <span class="token comment" spellcheck="true">/// 获取节点</span>
        <span class="token comment" spellcheck="true">/// &lt;/summary></span>
        <span class="token comment" spellcheck="true">/// &lt;param name="index">从0开始的下标&lt;/param></span>
        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
        <span class="token keyword">public</span> XmlNode <span class="token function">GetElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>Count <span class="token operator">></span> index<span class="token punctuation">)</span>
                <span class="token keyword">return</span> children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> XmlNode <span class="token function">GetElement</span><span class="token punctuation">(</span><span class="token keyword">string</span> cname<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> child <span class="token keyword">in</span> children<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>cname<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> child<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>XmlNode<span class="token operator">></span> <span class="token function">GetElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> children<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">GetAttribute</span><span class="token punctuation">(</span><span class="token keyword">string</span> key<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> attributes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token function">GetAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> attributes<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">GetAttributeArray</span><span class="token punctuation">(</span><span class="token keyword">string</span> key<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">string</span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token function">GetAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可能会有坑，但是我自己还没遇到…</p>
]]></content>
      
        <categories>
            
            <category> UnityScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xml解析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一键对齐父节点]]></title>
      <url>/2017/02/27/%E4%B8%80%E9%94%AE%E5%AF%B9%E9%BD%90%E7%88%B6%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>前端时间用了一阵FairyGUI，实话实说感觉非常友好！首先他提供了一个编辑器，各种拼接、动画==都做得很棒，而且，还具有跨平台的特点，代码接口做的也很完善，虽然很多坑，但是在群里和谷主联系后几乎都没毛病（此处有表情）。但是，本次新项目还是选择了UGUI，因为说是虽然简单、但是再招人补充人手时还得重头学。。。其实当时我也就看了一上午0.0<br>这两天用UGUI做Demo，虽然不求做的好看但是至少得有个对齐什么的吧，但是每次修改对齐时拖拖拖很麻烦，蛋疼没有一键对齐，于是乎，只能自己动手。<br>每个UI组件的共同特点是都有一个RectTransform,， 所以，我们的目标是扩展RectTransform的 Inspector 面板，加上相应的对齐按钮就OK了。思路有了，当操作的时候遇到了一个问题，系统自带的油了一个RectTransformEditor ，如果我们要重写的话会覆盖原来的，而且我们也没法继承系统的那个editor。试了好多种方法，最后，在 MoMo的博客里找到了解决方案 ：<br><a href="http://www.xuanyusong.com/archives/3931" target="_blank" rel="external">Unity3D研究院编辑器之不影响原有布局拓展Inspector（二十四）</a></p>
<p>通过反射获取相关信息，实现后我们的效果是：<br><img src="http://img.blog.csdn.net/20170227205559289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="aa"></p>
<p>在RectTransform的下方添加一个 “AlignParent” ，里面九个表示 相对于 父节点 的对齐。<br>具体代码如下：</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">
<span class="token comment" spellcheck="true">///</span>
<span class="token comment" spellcheck="true">/// Author:Cheng</span>
<span class="token comment" spellcheck="true">/// Time:2017/2/27</span>
<span class="token comment" spellcheck="true">/// Des:扩展RectTransform，一键对齐</span>
<span class="token comment" spellcheck="true">/// </span>

<span class="token keyword">using</span> UnityEditor<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token function">CustomEditor</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GUIAlignment</span> <span class="token punctuation">:</span> DecoratorEditor
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 继承自类DecoratorEditor，做反射获取RectTransformEditor内属性、方法</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token function">GUIAlignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">"RectTransformEditor"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 修改Inspector面板</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInspectorGUI</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnInspectorGUI</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//横向</span>
        EditorGUILayout<span class="token punctuation">.</span><span class="token function">LabelField</span><span class="token punctuation">(</span><span class="token string">"AlignParent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginVertical</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始绘制九宫格</span>
        EditorGUILayout<span class="token punctuation">.</span><span class="token function">Space</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//first row</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"┏"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform self <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>target<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获得当前操作的transform，target是父中参数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                RectTransform parent <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>          
                <span class="token function">SetPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"┳"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform self <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>target<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                RectTransform parent <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
                <span class="token function">SetPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"┓"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform self <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>target<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                RectTransform parent <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
                <span class="token function">SetPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//second row</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"┣"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform self <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>target<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                RectTransform parent <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
                <span class="token function">SetPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"╋"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform self <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>target<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                RectTransform parent <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
                <span class="token function">SetPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"┫"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform self <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>target<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                RectTransform parent <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
                <span class="token function">SetPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//third row</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"┗"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform self <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>target<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                RectTransform parent <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
                <span class="token function">SetPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"┻"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform self <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>target<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                RectTransform parent <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
                <span class="token function">SetPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"┛"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            RectTransform self <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>target<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                RectTransform parent <span class="token operator">=</span> <span class="token punctuation">(</span>RectTransform<span class="token punctuation">)</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
                <span class="token function">SetPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndVertical</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 设置位置</span>
    <span class="token comment" spellcheck="true">/// 1 2 3</span>
    <span class="token comment" spellcheck="true">/// 4 5 6</span>
    <span class="token comment" spellcheck="true">/// 7 8 9</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="self">操作的UI&lt;/param></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="parent">父节点&lt;/param></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="type">九宫格位置&lt;/param></span>
    <span class="token keyword">void</span> <span class="token function">SetPos</span><span class="token punctuation">(</span>RectTransform self<span class="token punctuation">,</span> RectTransform parent<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//Vector2 max = self.anchorMax;</span>
        <span class="token comment" spellcheck="true">//Vector2 min = self.anchorMin;</span>
        Vector2 pos <span class="token operator">=</span> self<span class="token punctuation">.</span>anchoredPosition<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//坐标点相对锚点位置</span>

        Vector2 p_middle <span class="token operator">=</span> parent<span class="token punctuation">.</span>sizeDelta<span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父节点的size的一半</span>
        p_middle<span class="token punctuation">.</span>x <span class="token operator">=</span> p_middle<span class="token punctuation">.</span>x <span class="token operator">*</span> parent<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>x<span class="token punctuation">;</span> p_middle<span class="token punctuation">.</span>y <span class="token operator">=</span> p_middle<span class="token punctuation">.</span>y <span class="token operator">*</span> parent<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//考虑到缩放</span>
        Vector2 s_middle <span class="token operator">=</span> self<span class="token punctuation">.</span>sizeDelta<span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">;</span>
        s_middle<span class="token punctuation">.</span>x <span class="token operator">=</span> s_middle<span class="token punctuation">.</span>x <span class="token operator">*</span> self<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>x<span class="token punctuation">;</span> s_middle<span class="token punctuation">.</span>y <span class="token operator">=</span> s_middle<span class="token punctuation">.</span>y <span class="token operator">*</span> self<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span>

        self<span class="token punctuation">.</span>anchorMax <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>one <span class="token operator">*</span> <span class="token number">0.5f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重置锚点位置为居中</span>
        self<span class="token punctuation">.</span>anchorMin <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>one <span class="token operator">*</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>
        self<span class="token punctuation">.</span>anchoredPosition <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重置UI位置为正中</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
                pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>x <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为unity的坐标采用左下角为坐标元点，故取负值</span>
                pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>y <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
                pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>y <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
                pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>x <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>y <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>
                pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>x <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>
                pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>
                pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>x <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>
                pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>x <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>y <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>
                pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>y <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">9</span><span class="token punctuation">:</span>
                pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>x <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>p_middle<span class="token punctuation">.</span>y <span class="token operator">-</span> s_middle<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>anchoredPosition <span class="token operator">=</span> pos<span class="token punctuation">;</span>
       <span class="token comment" spellcheck="true">// self.anchorMax = max;</span>
       <span class="token comment" spellcheck="true">// self.anchorMin = min;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除此之外，有一个 缺点,由于锚点是有两个相对坐标，分别为min、max，当UI拉伸时将会起相应的作用，所以，我要对齐时不能改变UI的大小，所以，锚点我会把它设置为中心，然后再改变位置，最后还有一个问题没解决，就是锚点初始设置不是中心时，改变位置后我再设置为原锚点会发现不对应的Bug，所以，改变位置后需要手动重新设置锚点。<br>that’s all。</p>
]]></content>
      
        <categories>
            
            <category> UGUI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UGUI </tag>
            
            <tag> 对齐 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[扫雷 unity版]]></title>
      <url>/2017/02/20/%E6%89%AB%E9%9B%B7unity%E7%89%88/</url>
      <content type="html"><![CDATA[<p>以前看没想过扫雷的实现，昨天看到一个帖子发的扫雷，写的很恶心，所以自己就尝试了一下，直接新建一个cs脚本复制以下代码就可以了。<br>先看看效果<br><img src="http://img.blog.csdn.net/20170220105031070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="扫雷图来源于我的csdn"></p>
<p>代码：</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MineSweeper</span> <span class="token punctuation">:</span> MonoBehaviour
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> MineSweeper instance<span class="token punctuation">;</span>
    <span class="token keyword">private</span> GameObject prefab<span class="token punctuation">;</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>MineCube<span class="token operator">></span> objects<span class="token punctuation">;</span> 

    <span class="token keyword">public</span> <span class="token keyword">int</span> Row <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> Col <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> Mine <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> totalCount<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token function">CreatePrefab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>MineCube<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//mine总数小于格子数</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Mine <span class="token operator">></span> Row<span class="token operator">*</span>Col<span class="token punctuation">)</span> <span class="token punctuation">{</span>Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Mine's count canot more than grid's count!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
        totalCount <span class="token operator">=</span> Row<span class="token operator">*</span>Col<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//清除所有旧物体</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> objects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">DoDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        objects<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//创建物体</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">CreateObject</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//创建mine</span>
        <span class="token function">CreateMines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//更新数据</span>
        <span class="token function">UpdateMines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        GUI<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.5f</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"TotalBlock: "</span> <span class="token operator">+</span> Row <span class="token operator">*</span> Col <span class="token operator">+</span> <span class="token string">" Mine: "</span> <span class="token operator">+</span> Mine<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GUI<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Row"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">string</span> row <span class="token operator">=</span> GUI<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Row<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token keyword">out</span> Row<span class="token punctuation">)</span><span class="token punctuation">)</span>
            Row <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        GUI<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Col"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">string</span> col <span class="token operator">=</span> GUI<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Col<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> <span class="token keyword">out</span> Col<span class="token punctuation">)</span><span class="token punctuation">)</span>
            Col <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        GUI<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Mine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">string</span> mine <span class="token operator">=</span> GUI<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Mine<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>mine<span class="token punctuation">,</span> <span class="token keyword">out</span> Mine<span class="token punctuation">)</span><span class="token punctuation">)</span>
            Mine <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>GUI<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Create"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 创建预制体，附加TextMesh</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">void</span> <span class="token function">CreatePrefab</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        prefab <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>PrimitiveType<span class="token punctuation">.</span>Cube<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GameObject text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameObject</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        text<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TextMesh txtMesh <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>TextMesh<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        text<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>parent <span class="token operator">=</span> prefab<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>
        text<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>

        txtMesh<span class="token punctuation">.</span>color <span class="token operator">=</span> Color<span class="token punctuation">.</span>black<span class="token punctuation">;</span>
        txtMesh<span class="token punctuation">.</span>anchor <span class="token operator">=</span> TextAnchor<span class="token punctuation">.</span>MiddleCenter<span class="token punctuation">;</span>
        txtMesh<span class="token punctuation">.</span>alignment <span class="token operator">=</span> TextAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">;</span>
        txtMesh<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

        prefab<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        prefab<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>MineCube<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        prefab<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>localScale <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>one <span class="token operator">*</span> <span class="token number">0.9f</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        GameObject obj <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>prefab<span class="token punctuation">)</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MineCube mineCube <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>MineCube<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mineCube<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> objects<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        objects<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>mineCube<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">CreateMines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//Mine个不重复随机数</span>
        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> randoms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Mine<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> r <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> objects<span class="token punctuation">.</span>Count<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>randoms<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                r <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>objects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            randoms<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//设置mine</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Mine<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            objects<span class="token punctuation">[</span>randoms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SetState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// （该部分可优化）</span>
    <span class="token comment" spellcheck="true">/// 如果是mine，跳过</span>
    <span class="token comment" spellcheck="true">/// 否则，判断周围是否有mine</span>
    <span class="token comment" spellcheck="true">///         是：直接统计九宫格内mine 个数</span>
    <span class="token comment" spellcheck="true">///         否：把周围空格标记</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">void</span> <span class="token function">UpdateMines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                MineCube mine <span class="token operator">=</span> objects<span class="token punctuation">[</span>i<span class="token operator">*</span>Col <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mine<span class="token punctuation">.</span><span class="token function">isMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> j<span class="token number">-1</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">>=</span> Row <span class="token operator">||</span> l <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> l <span class="token operator">>=</span> Col<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//划定九宫格界限</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> l <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排除自身</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>objects<span class="token punctuation">[</span>k<span class="token operator">*</span>Col <span class="token operator">+</span> l<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            mine<span class="token punctuation">.</span><span class="token function">AddAroundMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">else</span>
                            mine<span class="token punctuation">.</span><span class="token function">AddAroundBlock</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>k<span class="token operator">*</span>Col <span class="token operator">+</span> l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">GameOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"GameOver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 点击判断，根据剩下的格子数判断输赢</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="ismine">&lt;/param></span>
    <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">SendCount</span><span class="token punctuation">(</span><span class="token keyword">bool</span> ismine<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ismine<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            totalCount<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>totalCount <span class="token operator">==</span> Mine<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Congratulations! You Win"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MineCube</span> <span class="token punctuation">:</span> MonoBehaviour
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> TextMesh textMesh<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0空白， 1mine</span>
    <span class="token keyword">private</span> Material mat<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> aroundMine<span class="token punctuation">;</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>MineCube<span class="token operator">></span> aroundBlock<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">bool</span> selected<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否选中</span>

    <span class="token keyword">void</span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        textMesh <span class="token operator">=</span> <span class="token generic-method function">GetComponentInChildren<span class="token punctuation">&lt;</span>TextMesh<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mat <span class="token operator">=</span> <span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>Renderer<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material<span class="token punctuation">;</span>
        state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        aroundMine <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        aroundBlock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>MineCube<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        selected <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnMouseDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>selected<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        selected <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记选中</span>
        MineSweeper<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">SendCount</span><span class="token punctuation">(</span><span class="token function">isMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//该块是mine则游戏结束</span>
        <span class="token punctuation">{</span>
            MineSweeper<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">GameOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 是mine标记X， 不是则判断周围有显示数字，没有则把相邻的所有没有的都显示出来</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            textMesh<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"X"</span><span class="token punctuation">;</span>
            mat<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>aroundMine <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                textMesh<span class="token punctuation">.</span>text <span class="token operator">=</span> aroundMine<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token function">ShowAroundBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            mat<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 显示周围空白格</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ShowAroundBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selected<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>selected <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
            MineSweeper<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">SendCount</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        mat<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _block <span class="token keyword">in</span> aroundBlock<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历周围的空白方格</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_block<span class="token punctuation">.</span>selected <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>_block<span class="token punctuation">.</span><span class="token function">isMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> _block<span class="token punctuation">.</span>aroundMine <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//该方格未被选中且同样和当前方格一样是一个空白的，周围没有mine的</span>
            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//点击到空白的时要一起显示空白</span>
                _block<span class="token punctuation">.</span><span class="token function">ShowAroundBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 鼠标进入时设置颜色、因为创建的预制体有碰撞器，故OnMouse***函数有效</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnMouseEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mat<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 鼠标退出时恢复原状</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnMouseExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>selected<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                mat<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                mat<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
            mat<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span><span class="token string">"_Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



    <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>
        transform<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">DoDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// state 的 0:空白没有mine</span>
    <span class="token comment" spellcheck="true">///          1:是mine</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="p">&lt;/param></span>
    <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">SetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        state <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 判断是否是mine</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>
    <span class="token keyword">internal</span> <span class="token keyword">bool</span> <span class="token function">isMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 在UpdateMines中用来更新该block周围的Mine数量</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">AddAroundMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        aroundMine<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// 当前格为空block时标记周围八个格中没有mine的格</span>
    <span class="token comment" spellcheck="true">/// 用来显示连续显示</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token comment" spellcheck="true">/// &lt;param name="block">&lt;/param></span>
    <span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">AddAroundBlock</span><span class="token punctuation">(</span>MineCube block<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        aroundBlock<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> UnityScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 扫雷 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于A*的构想]]></title>
      <url>/2017/02/13/%E5%85%B3%E4%BA%8EA%E7%9A%84%E6%9E%84%E6%83%B3/</url>
      <content type="html"><![CDATA[<h3 id="原理及伪代码实现"><a href="#原理及伪代码实现" class="headerlink" title="原理及伪代码实现"></a>原理及伪代码实现</h3><p>A Star 算法的具体作用可以忽略不表了，基本上想用的都知道，不知道的基本上不在乎。<br>具体伪代码如下： </p>
<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">FindPath</span><span class="token punctuation">(</span>Point<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> maps<span class="token punctuation">,</span> Point start<span class="token punctuation">,</span> Point end<span class="token punctuation">)</span>  
<span class="token punctuation">{</span>  
    openList<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启列表，就是一个等待检查方格的列表  </span>
    closeList<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//闭合列表，不需要再次检查的方格  </span>

    openList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加起始点至待检查  </span>
    <span class="token keyword">bool</span> isFound <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  

    <span class="token keyword">while</span> <span class="token punctuation">(</span>openList<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">//通过F=G+H寻找开启列表中最靠谱节点  </span>
        <span class="token keyword">var</span> temStart <span class="token operator">=</span> <span class="token function">GetMinCostInOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        openList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>temStart<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到后加入闭合列表  </span>
        closeList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>temStart<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">//寻找该节点周围节点,除不可访问节点和已访问节点  </span>
        <span class="token keyword">var</span> neighbors <span class="token operator">=</span> <span class="token function">GetNeighbors</span><span class="token punctuation">(</span>temStart<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> neighbor <span class="token keyword">in</span> neighbors<span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>openList<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token punctuation">{</span>  
                <span class="token comment" spellcheck="true">//如果开启列表中已有该节点，通过比较到起始点距离（因为  </span>
                    <span class="token comment" spellcheck="true">//到结束点距离不会改变）  </span>
                <span class="token keyword">int</span> c <span class="token operator">=</span> neighbor<span class="token punctuation">.</span><span class="token function">TryGetCostToStart</span><span class="token punctuation">(</span>temStart<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> neighbor<span class="token punctuation">.</span>g<span class="token punctuation">)</span>  
                <span class="token punctuation">{</span>  
                    <span class="token comment" spellcheck="true">//如果小于原花费，则更新花费，并重设父节点为当前节点  </span>
                    neighbor<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>temStart<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
            <span class="token punctuation">}</span>  
            <span class="token keyword">else</span>  
            <span class="token punctuation">{</span>  
                <span class="token comment" spellcheck="true">//如果开启列表不包含该节点，则加入并设置父节点  </span>
                openList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                neighbor<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>temStart<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  

        <span class="token keyword">if</span> <span class="token punctuation">(</span>openList<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>  
        <span class="token punctuation">{</span>  
            <span class="token comment" spellcheck="true">//如果开启列表中已包含结束点则证明找到  </span>
            isFound <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>  
            <span class="token keyword">break</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  

    <span class="token comment" spellcheck="true">//通过isFound判断是否找到，已找到后可以根据结束点父节点倒推路劲  </span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至于具体的原理及意义可参考：<a href="http://www.cnblogs.com/technology/archive/2011/05/26/2058842.html" target="_blank" rel="external">理解AStar寻路算法具体过程</a></p>
<h3 id="优化构想"><a href="#优化构想" class="headerlink" title="优化构想"></a>优化构想</h3><p>Astar作为寻路算法应用十分广泛，但是，如果在一个超大的地图上、多人同时寻路中，超长距离的寻路对性能的消耗十分严重，因为它需要遍历格子，还需要维持开启列表找到最小值，So， 关于Astar的优化，个人做了两点考虑，<br>1，缩小寻路块<br>2，更方便的维持开启列表<br>对于第二点，个人的考虑是，在搜索到周围节点加入开启列表时，维持开启列表从小到大的有序性。具体做法是用一种算法控制查找等的消耗时间，比如，用二叉树控制插入的节点，使父节点永远小于子节点，或者直接使用折半查找等，怎么高兴怎么来，最后看疗效决定。<br>对于第一点，个人目前的的做法是使用 四叉树 进行场景管理。首先在处理完地图以后，进行四叉树的构建和场景合并：某一层次下叶节点全可通过则标记该节点可通过，反之亦然。在寻路的过程中，首先确定起始点所在的节点，通过节点进行寻路，具体做法同Astar。这样，假如我们就算最底层的长度为2，我们也相当于把地图缩小了四倍。但有一点，我们创建四叉树时，节点的坐标一般选择所表示的区域中心点，所以用来做寻路的也是该区域的中心点。也就是或出现具体执行路径时是这种情况：玩家从当前所在位置——&gt;玩家所在节点的中心点——&gt;正常寻路——&gt;结束点所在节点的中心点——&gt;结束点。开始和结束都要去节点中心点，这个在短距离寻路中，会有绕行的感觉，所以，不适合短距离寻路…T.T<br>个人的 实际代码未整理有些凌乱暂时就不贴了，效率自测，应该不会辜负你的期望。</p>
]]></content>
      
        <categories>
            
            <category> UnityScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> A* </tag>
            
            <tag> 优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android连接问题]]></title>
      <url>/2016/12/05/Android%E8%BF%9E%E6%8E%A5%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>1，Error: Program “/NDK-build” not found in PATH<br>解决方法： <a href="http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path" target="_blank" rel="external">http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path</a><br>最后试了：C/C++ Build | Tool Chain Editor and select Android Builder as current builder.</p>
<p>2，ADB错误“more than one device and emulator”<br>解决方法：adb kill-server<br>并参考了了博客： <a href="http://blog.csdn.net/gaojinshan/article/details/9455193" target="_blank" rel="external">http://blog.csdn.net/gaojinshan/article/details/9455193</a></p>
]]></content>
      
        <categories>
            
            <category> 基础操作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单Transparent shader的三种实现]]></title>
      <url>/2016/11/24/%E7%AE%80%E5%8D%95Transparent%20shader%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>第一个SubShader:固定管线<br>第二个SubShader:unity shader<br>第三个SubShader:顶点片段</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">
Shader <span class="token string">"Custom/Transparent"</span> <span class="token punctuation">{</span>
    Properties <span class="token punctuation">{</span>
        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Main Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">)</span>
        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Base (RGB)"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    SubShader <span class="token punctuation">{</span>
        Tags <span class="token punctuation">{</span> <span class="token string">"Queue"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token punctuation">}</span>
        Pass<span class="token punctuation">{</span>
            Blend SrcAlpha OneMinusSrcAlpha
            Color<span class="token punctuation">[</span>_Color<span class="token punctuation">]</span>
            SetTexture<span class="token punctuation">[</span>_MainTex<span class="token punctuation">]</span><span class="token punctuation">{</span>
                combine previous <span class="token operator">*</span> texture
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    SubShader <span class="token punctuation">{</span>
        Tags <span class="token punctuation">{</span> <span class="token string">"Queue"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token punctuation">}</span>
        CGPROGRAM
        <span class="token macro property">#<span class="token directive keyword">pragma</span> surface surf Lambert alpha</span>

        fixed4 _Color<span class="token punctuation">;</span>
        sampler2D _MainTex<span class="token punctuation">;</span>

        <span class="token keyword">struct</span> Input <span class="token punctuation">{</span>
            float2 uv_MainTex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutput o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> _Color<span class="token punctuation">;</span>
            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>
            o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        ENDCG
    <span class="token punctuation">}</span>
    SubShader <span class="token punctuation">{</span>
        Tags <span class="token punctuation">{</span> <span class="token string">"Queue"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token punctuation">}</span>
        Blend SrcAlpha OneMinusSrcAlpha
        Pass<span class="token punctuation">{</span>
            CGPROGRAM
            <span class="token macro property">#<span class="token directive keyword">pragma</span> vertex vert</span>
            <span class="token macro property">#<span class="token directive keyword">pragma</span> fragment frag</span>
            <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"UnityCG.cginc"</span></span>

            fixed4 _Color<span class="token punctuation">;</span>
            sampler2D _MainTex<span class="token punctuation">;</span>

            <span class="token keyword">struct</span> v2f<span class="token punctuation">{</span>
                float4 vertex <span class="token operator">:</span> POSITION<span class="token punctuation">;</span>
                float2 texcoord <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            v2f <span class="token function">vert</span><span class="token punctuation">(</span>appdata_base v<span class="token punctuation">)</span><span class="token punctuation">{</span>
                v2f o<span class="token punctuation">;</span>
                  o<span class="token punctuation">.</span>vertex <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>UNITY_MATRIX_MVP<span class="token punctuation">,</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  o<span class="token punctuation">.</span>texcoord <span class="token operator">=</span> v<span class="token punctuation">.</span>texcoord<span class="token punctuation">;</span>
                  <span class="token keyword">return</span> o<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span><span class="token operator">:</span>COLOR<span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">tex2D</span><span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> i<span class="token punctuation">.</span>texcoord<span class="token punctuation">)</span> <span class="token operator">*</span> _Color<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            ENDCG
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    FallBack <span class="token string">"Transparent/Diffuse"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> UnityShader </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity中画实线与虚线]]></title>
      <url>/2016/11/24/Unity%E4%B8%AD%E7%94%BB%E5%AE%9E%E7%BA%BF%E4%B8%8E%E8%99%9A%E7%BA%BF/</url>
      <content type="html"><![CDATA[<p>以前用过Vectrosity来画过线，但时间久了忘记怎么用了，也忘记能不能画虚线了。试了一下Unity的LineRenderer加上一个材质来画虚线，但是它是把我们的贴图给拉伸覆盖创建出来的mesh的，忘记保存我的实验效果了。。。可能改改Shader还可以用吧。针扎一番后决定自己用GL写，由于Unity中GL与真正的GL有差距，所以虚线费了点事。</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><pre class="line-numbers language-csharp"><code class="language-csharp">
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> LineType
<span class="token punctuation">{</span>
    Dashed<span class="token punctuation">,</span>
    Line
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorLines</span> <span class="token punctuation">:</span> MonoBehaviour
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> VectorLines inst<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> VectorLines instance
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>inst <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                inst <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>VectorLines<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> inst<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> Dictionary<span class="token operator">&lt;</span>Line<span class="token punctuation">,</span> Callback0<span class="token operator">></span> lines<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Material lineMaterial<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        lines <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>Line<span class="token punctuation">,</span> Callback0<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lineMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Material</span><span class="token punctuation">(</span><span class="token string">"Shader \"Lines/Colored Blended\" {"</span> <span class="token operator">+</span>
                <span class="token string">"SubShader { Pass {"</span> <span class="token operator">+</span>
            <span class="token string">"   BindChannels { Bind \"Color\",color }"</span> <span class="token operator">+</span>
            <span class="token string">"   Blend SrcAlpha OneMinusSrcAlpha"</span> <span class="token operator">+</span>
            <span class="token string">"   ZWrite Off Cull Off Fog { Mode Off }"</span> <span class="token operator">+</span>
            <span class="token string">"} } }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        lineMaterial<span class="token punctuation">.</span>hideFlags <span class="token operator">=</span> HideFlags<span class="token punctuation">.</span>HideAndDontSave<span class="token punctuation">;</span>

        lineMaterial<span class="token punctuation">.</span>shader<span class="token punctuation">.</span>hideFlags <span class="token operator">=</span> HideFlags<span class="token punctuation">.</span>HideAndDontSave<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Draw</span><span class="token punctuation">(</span>Line line<span class="token punctuation">,</span> Callback0 draw<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lines<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> 
            lines<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lines<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> draw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Cancel</span><span class="token punctuation">(</span>Line line<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lines<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>
            lines<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">OnPostRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lines<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            lineMaterial<span class="token punctuation">.</span><span class="token function">SetPass</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            GL<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span>GL<span class="token punctuation">.</span>LINES<span class="token punctuation">)</span><span class="token punctuation">;</span>
            GL<span class="token punctuation">.</span><span class="token function">Color</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> line <span class="token keyword">in</span> lines<span class="token punctuation">.</span>Values<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            GL<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Line</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> LineType lineType<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span> vectors<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">float</span> length<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Vector3 dir<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Vector3 next<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Vector3 cur<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        lineType <span class="token operator">=</span> LineType<span class="token punctuation">.</span>Line<span class="token punctuation">;</span>
        vectors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">,</span> Vector3<span class="token punctuation">.</span>left<span class="token punctuation">}</span><span class="token punctuation">;</span>
        length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">ReDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">Line</span><span class="token punctuation">(</span>LineType lt<span class="token punctuation">,</span> Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span> vecs<span class="token punctuation">,</span> <span class="token keyword">float</span> len <span class="token operator">=</span> <span class="token number">0.2f</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        lineType <span class="token operator">=</span> lt<span class="token punctuation">;</span>
        vectors <span class="token operator">=</span> vecs<span class="token punctuation">;</span>
        length <span class="token operator">=</span> len<span class="token punctuation">;</span>
        <span class="token function">ReDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetType</span><span class="token punctuation">(</span>LineType lt<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lineType <span class="token operator">==</span> lt<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        lineType <span class="token operator">=</span> lt<span class="token punctuation">;</span>
        <span class="token function">ReDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetVectors</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span> vecs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vectors <span class="token operator">==</span> vecs<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        vectors <span class="token operator">=</span> vecs<span class="token punctuation">;</span>
        <span class="token function">ReDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/// &lt;summary></span>
    <span class="token comment" spellcheck="true">/// Can use only in dashed mode</span>
    <span class="token comment" spellcheck="true">/// &lt;/summary></span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SetLength</span><span class="token punctuation">(</span><span class="token keyword">float</span> len<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        length <span class="token operator">=</span> len<span class="token punctuation">;</span>
        <span class="token function">ReDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        VectorLines<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">ReDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vectors<span class="token punctuation">.</span>Length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"vectors' length canot less than 2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lineType <span class="token operator">==</span> LineType<span class="token punctuation">.</span>Line<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            VectorLines<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">Draw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vectors<span class="token punctuation">.</span>Length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    GL<span class="token punctuation">.</span><span class="token function">Vertex</span><span class="token punctuation">(</span>vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    GL<span class="token punctuation">.</span><span class="token function">Vertex</span><span class="token punctuation">(</span>vectors<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lineType <span class="token operator">==</span> LineType<span class="token punctuation">.</span>Dashed<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Length canot less than 0 in dashed mode!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
            VectorLines<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">Draw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vectors<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    cur <span class="token operator">=</span> vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    dir <span class="token operator">=</span> <span class="token punctuation">(</span>vectors<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>
                    GL<span class="token punctuation">.</span><span class="token function">Vertex</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    next <span class="token operator">=</span> cur <span class="token operator">+</span> dir<span class="token operator">*</span>length<span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>vectors<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        GL<span class="token punctuation">.</span><span class="token function">Vertex</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
                        next <span class="token operator">=</span> cur <span class="token operator">+</span> dir<span class="token operator">*</span>length<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    GL<span class="token punctuation">.</span><span class="token function">Vertex</span><span class="token punctuation">(</span>vectors<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token class-name">Line</span><span class="token punctuation">(</span>LineType<span class="token punctuation">.</span>Dashed<span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token number">0.2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画虚线  </span>
<span class="token keyword">new</span> <span class="token class-name">Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画实线</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="具体效果"><a href="#具体效果" class="headerlink" title="具体效果"></a>具体效果</h3><p><img src="http://img.blog.csdn.net/20161124150745143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="使用效果"></p>
<p>该做法优点是画多条线只增加一个DC,缺点也很明显，颜色单一，线条宽度。。。。试试其他有没有更好的方法吧。</p>
<h3 id="bug修正"><a href="#bug修正" class="headerlink" title="bug修正"></a>bug修正</h3><p>当画虚线时长度分割正好为单数的时候会和下一条线连在一起，做出修改：</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Length canot less than 0 in dashed mode!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  
        VectorLines<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">Draw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  
        <span class="token punctuation">{</span>  
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vectors<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  
            <span class="token punctuation">{</span>  
                cur <span class="token operator">=</span> vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  
                dir <span class="token operator">=</span> <span class="token punctuation">(</span>vectors<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>normalized<span class="token punctuation">;</span>  
                GL<span class="token punctuation">.</span><span class="token function">Vertex</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
                next <span class="token operator">=</span> cur <span class="token operator">+</span> dir<span class="token operator">*</span>length<span class="token punctuation">;</span>  
                <span class="token keyword">while</span> <span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>vectors<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                <span class="token punctuation">{</span>  
                    GL<span class="token punctuation">.</span><span class="token function">Vertex</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    flag<span class="token operator">++</span><span class="token punctuation">;</span>  
                    cur <span class="token operator">=</span> next<span class="token punctuation">;</span>  
                    next <span class="token operator">=</span> cur <span class="token operator">+</span> dir<span class="token operator">*</span>length<span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
                GL<span class="token punctuation">.</span><span class="token function">Vertex</span><span class="token punctuation">(</span>vectors<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                flag<span class="token operator">++</span><span class="token punctuation">;</span>  
                <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  
                    GL<span class="token punctuation">.</span><span class="token function">Vertex</span><span class="token punctuation">(</span>vectors<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> UnityScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 画线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SVN下载github上的文件]]></title>
      <url>/2016/11/07/SVN%E4%B8%8B%E8%BD%BDgithub%E4%B8%8A%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="选择所要下载的地址"><a href="#选择所要下载的地址" class="headerlink" title="选择所要下载的地址"></a>选择所要下载的地址</h2><p>如   <a href="https://github.com/*****/*******/tree/master/******" target="_blank" rel="external">https://github.com/*****/*******/tree/master/******</a></p>
<h2 id="替换-tree-master-为-trunk"><a href="#替换-tree-master-为-trunk" class="headerlink" title="替换 tree/master 为 trunk"></a>替换 tree/master 为 trunk</h2><h2 id="输入到相应的地址"><a href="#输入到相应的地址" class="headerlink" title="输入到相应的地址"></a>输入到相应的地址</h2><p>so easy!</p>
]]></content>
      
        <categories>
            
            <category> 基础操作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> svn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础光照——漫反射与高光反射]]></title>
      <url>/2016/09/23/unity-shader-light/</url>
      <content type="html"><![CDATA[<h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>继续学习《Unity Shader 入门精要》。渲染的流程前部分是坐标变换，变换顺序是：<br>模型空间（Model Space）–&gt;世界空间（World Space）–&gt;观察空间（View Space）–&gt;裁剪空间–&gt;屏幕空间<br>具体的矩阵变换可以方便的使用内置矩阵：</p>
<pre><code>UNITY_MATRIX_MVP        当前模型视图投影矩阵
UNITY_MATRIX_MV           当前模型视图矩阵
UNITY_MATRIX_V              当前视图矩阵。
UNITY_MATRIX_P              目前的投影矩阵
UNITY_MATRIX_VP            当前视图*投影矩阵
UNITY_MATRIX_T_MV       移调模型视图矩阵
UNITY_MATRIX_IT_MV      模型视图矩阵的逆转
UNITY_MATRIX_TEXTURE0   UNITY_MATRIX_TEXTURE3          纹理变换矩阵
</code></pre><p>记住变换顺序很有必要，并且，如果两个矩阵要做 mul 运算的时候，必须在同一坐标空间下。</p>
<h3 id="漫反射光照模型"><a href="#漫反射光照模型" class="headerlink" title="漫反射光照模型"></a>漫反射光照模型</h3><pre class="line-numbers language-cpp"><code class="language-cpp">
<span class="token comment" spellcheck="true">// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'</span>

Shader <span class="token string">"Mine/6_DiffuseVertexLevel"</span> <span class="token punctuation">{</span>
    Properties <span class="token punctuation">{</span>
        <span class="token function">_Diffuse</span> <span class="token punctuation">(</span><span class="token string">"Diffuse"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    SubShader <span class="token punctuation">{</span>
        Pass <span class="token punctuation">{</span>
            Tags <span class="token punctuation">{</span> <span class="token string">"LightMode"</span><span class="token operator">=</span><span class="token string">"ForwardBase"</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//只有定义了正确的 LightMode 才能得到要用的 _LightColor0 ...</span>

            CGPROGRAM

            <span class="token macro property">#<span class="token directive keyword">pragma</span> vertex vert</span>
            <span class="token macro property">#<span class="token directive keyword">pragma</span> fragment frag</span>

            <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Lighting.cginc"</span> </span><span class="token comment" spellcheck="true">//得到要使用的 _LightColor0 等内置变量</span>

            fixed4 _Diffuse<span class="token punctuation">;</span>

            <span class="token keyword">struct</span> a2v <span class="token punctuation">{</span>
                float4 vertex <span class="token operator">:</span> POSITION<span class="token punctuation">;</span>
                float3 normal <span class="token operator">:</span> NORMAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">struct</span> v2f <span class="token punctuation">{</span>
                float4 pos <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>
                fixed3 color <span class="token operator">:</span> COLOR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// or TEXCOORD0</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            v2f <span class="token function">vert</span><span class="token punctuation">(</span>a2v v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                v2f o<span class="token punctuation">;</span>
                o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>UNITY_MATRIX_MVP<span class="token punctuation">,</span> v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// must ,get projection space</span>

                fixed3 ambient <span class="token operator">=</span> UNITY_LIGHTMODEL_AMBIENT<span class="token punctuation">.</span>xyz<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//get ambient</span>
                <span class="token comment" spellcheck="true">// 把法线从模型空间转换到世界空间，用的右乘当逆矩阵</span>
                fixed3 worldNormal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>normal<span class="token punctuation">,</span> <span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>unity_WorldToObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                fixed3 worldLight <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceLightPos0<span class="token punctuation">.</span>xyz <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只适用于平行光</span>
                <span class="token comment" spellcheck="true">//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（法线，光源方向））</span>
                fixed3 diffuse <span class="token operator">=</span> _LightColor0<span class="token punctuation">.</span>rgb <span class="token operator">*</span> _Diffuse<span class="token punctuation">.</span>rgb <span class="token operator">*</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>worldNormal<span class="token punctuation">,</span> worldLight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//如果是半lambert，则公式为</span>
                <span class="token comment" spellcheck="true">//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ （缩放倍数＊dot（法线，光源方向） ＋ 偏移）</span>
                <span class="token comment" spellcheck="true">//一般缩放倍数和便宜都取0.5</span>
                <span class="token comment" spellcheck="true">//fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * (0.5*dot(worldNormal,worldLight)+0.5);</span>

                o<span class="token punctuation">.</span>color <span class="token operator">=</span> ambient <span class="token operator">+</span> diffuse<span class="token punctuation">;</span>
                <span class="token keyword">return</span> o<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>color<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            ENDCG            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Fallback <span class="token string">"Diffuse"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要改为逐像素光照，需要改变 struct v2f，</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> v2f <span class="token punctuation">{</span>
    float4 pos <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>
    fixed3 worldNormal <span class="token operator">:</span> TEXCOORD0
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>剩下的工作就是把 vert函数中的部分挪到 frag函数中。<br>另，代码中的半Lambert光照模型是为了解决在实际中，普通漫反射在光照不到的情况下是暗黑色的问题。</p>
<h3 id="高光反射光照模型"><a href="#高光反射光照模型" class="headerlink" title="高光反射光照模型"></a>高光反射光照模型</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'</span>
<span class="token comment" spellcheck="true">// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'</span>

Shader <span class="token string">"Custom/6_SpecularVertexLevel"</span> <span class="token punctuation">{</span>
    Properties <span class="token punctuation">{</span>
        <span class="token function">_Diffuse</span> <span class="token punctuation">(</span><span class="token string">"Diffuse"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>
        <span class="token function">_Specular</span> <span class="token punctuation">(</span><span class="token string">"Specular"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>
        <span class="token function">_Gloss</span> <span class="token punctuation">(</span><span class="token string">"Gloss"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
    SubShader <span class="token punctuation">{</span>
        Pass <span class="token punctuation">{</span>
            Tags <span class="token punctuation">{</span> <span class="token string">"LightMode"</span><span class="token operator">=</span><span class="token string">"ForwardBase"</span> <span class="token punctuation">}</span>

            CGPROGRAM

            <span class="token macro property">#<span class="token directive keyword">pragma</span> vertex vert</span>
            <span class="token macro property">#<span class="token directive keyword">pragma</span> fragment frag</span>

            <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Lighting.cginc"</span></span>

            fixed4 _Diffuse<span class="token punctuation">;</span>
            fixed4 _Specular<span class="token punctuation">;</span>
            <span class="token keyword">float</span> _Gloss<span class="token punctuation">;</span>

            <span class="token keyword">struct</span> a2v <span class="token punctuation">{</span>
                float4 vertex <span class="token operator">:</span> POSITION<span class="token punctuation">;</span>
                float3 normal <span class="token operator">:</span> NORMAL<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">struct</span> v2f <span class="token punctuation">{</span>
                float4 pos <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>
                fixed color <span class="token operator">:</span> COLOR<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            v2f <span class="token function">vert</span><span class="token punctuation">(</span>a2v v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                v2f o<span class="token punctuation">;</span>
                o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>UNITY_MATRIX_MVP<span class="token punctuation">,</span> v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                fixed3 ambient <span class="token operator">=</span> UNITY_LIGHTMODEL_AMBIENT<span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>

                fixed3 worldNormal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>normal<span class="token punctuation">,</span> <span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>unity_WorldToObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用unity内置函数是： ＝ UnityObjectToWorldNormal(v.normal)</span>
                fixed3 worldLightDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceLightPos0<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（入射方向，法线））</span>
                fixed3 diffuse <span class="token operator">=</span> _LightColor0<span class="token punctuation">.</span>rgb <span class="token operator">*</span> _Diffuse <span class="token operator">*</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">dot</span><span class="token punctuation">(</span>worldNormal<span class="token punctuation">,</span> worldLightDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">//reflect 计算反射方向,两个参数是 入射方向、法线，但是要求入射方向是光源指向入射点，故取反</span>
                fixed3 reflectDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">reflect</span><span class="token punctuation">(</span><span class="token operator">-</span>worldLightDir<span class="token punctuation">,</span> worldNormal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//计算视觉方向首先是要求处于同一空间下，然后向量计算</span>
                fixed3 viewDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceCameraPos<span class="token punctuation">.</span>xyz <span class="token operator">-</span> <span class="token function">mul</span><span class="token punctuation">(</span>unity_ObjectToWorld<span class="token punctuation">,</span> v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//高光反射 ＝ 入射光 ＊ 高光系数 ＊ pow（max（0，反射方向 ＊ 视觉方向），光泽度）</span>
                fixed3 specular <span class="token operator">=</span> _LightColor0<span class="token punctuation">.</span>rgb <span class="token operator">*</span> _Specular<span class="token punctuation">.</span>rgb <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>reflectDir<span class="token punctuation">,</span> viewDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _Gloss<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">//如果是 BlinnPhong 则把反射方向换成 光线方向和视觉方向和</span>
                <span class="token comment" spellcheck="true">//fixed3 halfDir = normalize(worldLightDir + viewDir);</span>
                <span class="token comment" spellcheck="true">//fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0,dot(worldNormal,halfDir)), _Gloss);</span>

                o<span class="token punctuation">.</span>color <span class="token operator">=</span> ambient <span class="token operator">+</span> diffuse <span class="token operator">+</span> specular<span class="token punctuation">;</span>
                <span class="token keyword">return</span> o<span class="token punctuation">;</span>        
            <span class="token punctuation">}</span>

            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>color<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            ENDCG
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Fallback <span class="token string">"Specular"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果改为逐像素光照需改动 struct v2f</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> v2f <span class="token punctuation">{</span>
    float4 pos <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span>
    fixed worldNormal<span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span>
    fixed worldPos<span class="token operator">:</span> TEXCOORD1<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后换上相应的即可。<br>代码中给出了用的最多的BlinnPhong模型，目前用的最多。</p>
<p>逐顶点光照和逐像素的区别在于计算的相对少和多，得到效果肯定计算多的逐像素更加显得平滑。</p>
]]></content>
      
        <categories>
            
            <category> UnityShader </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个简单的着色器]]></title>
      <url>/2016/09/23/a-simple-shader/</url>
      <content type="html"><![CDATA[<p>一直在关注<a href="http://blog.csdn.net/candycat1992" target="_blank" rel="external">CandyCat的博客</a>，所以在第一时间买了她新出的《Unity Shader 入门精要》，看了好久才记得要做读书笔记…是不是可以换句话说书写的太精彩忘记了<br>目前为止，第6章快看完了，回顾第五章讲的基础，就是一个简单的定点片元着色器，代码及注释如下：</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">Shader <span class="token string">"Mine/5_SimpleShader"</span>
<span class="token punctuation">{</span>
    Properties<span class="token punctuation">{</span>
        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color Tint"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    SubShader<span class="token punctuation">{</span>
        Pass<span class="token punctuation">{</span>
            CGPROGRAM
                <span class="token macro property">#<span class="token directive keyword">pragma</span> vertex vert</span>
                <span class="token macro property">#<span class="token directive keyword">pragma</span> fragment frag</span>

                fixed4 _Color<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//input</span>
                <span class="token keyword">struct</span> a2v <span class="token punctuation">{</span>
                    float4 vertex <span class="token operator">:</span> POSITION<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用模型空间定点填充vertex</span>
                    float4 normal <span class="token operator">:</span> NORMAL<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用模型空间的法线填充</span>
                    float4 texcoord <span class="token operator">:</span> TEXCOORD0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用第一套纹理填充</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">//vertex output</span>
                <span class="token keyword">struct</span> v2f <span class="token punctuation">{</span>
                    float4 pos <span class="token operator">:</span> SV_POSITION<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 裁剪空间中的位置信息填充pos</span>
                    fixed3 color <span class="token operator">:</span> COLOR0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 储存颜色信息</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>

                v2f <span class="token function">vert</span><span class="token punctuation">(</span>a2v v<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//SV_POSITION意思是输出的是裁剪空间坐标</span>
                    v2f o<span class="token punctuation">;</span>
                    o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>UNITY_MATRIX_MVP<span class="token punctuation">,</span> v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转换到裁剪空间,顶点着色器中必须包含一个 SV_POSITION,否则无法得到裁剪空间中的坐标</span>
                    o<span class="token punctuation">.</span>color <span class="token operator">=</span> v<span class="token punctuation">.</span>normal <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> <span class="token function">fixed3</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//normal 范围（－1，1），color范围则成了（0，1）</span>
                    <span class="token keyword">return</span> o<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//SV_Target 把输出的颜色储存到默认帧缓冲</span>
                    <span class="token keyword">return</span> <span class="token function">fixed4</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>color <span class="token operator">*</span> _Color<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            ENDCG
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有，以后记得自己实践并记录！</p>
]]></content>
      
        <categories>
            
            <category> UnityShader </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[敏感词的字典树匹配（lua版）]]></title>
      <url>/2016/08/01/dirty-world-by-lua/</url>
      <content type="html"><![CDATA[<p>对于国内互联网和出版物来说，屏蔽敏感词和某些众所周知的秘密是一件老生常谈加司空见惯的事情了。。。上周小白也做了一个这个功能，但是我们属于游戏，要屏蔽的东西十分简单，不用像那些大型网站或者平台一样用专门的算法进行匹配，所以就能省则省。。。但是还是想说蛋疼的模式匹配啊</p>
<h2 id="几种匹配方式对比"><a href="#几种匹配方式对比" class="headerlink" title="几种匹配方式对比"></a>几种匹配方式对比</h2><h3 id="普通匹配法"><a href="#普通匹配法" class="headerlink" title="普通匹配法"></a>普通匹配法</h3><p>该方法就是直接进行字符匹配，遍历所有的敏感词列表看看用户的输入中是否有敏感词出现，这种对敏感词少且输入短的来说是无所谓，但是真正的应用，我只能说：呵呵。。。</p>
<h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><p>我也觉得正则匹配用到此处刚刚好，完全可以担当灵活多变四个字。但是如果是匹配有某些规律的还好说，可敏感词我还真找不出来他都是什么规律，想了想，无奈的放弃吧，当断则断</p>
<h3 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h3><p>从运营处拿到了两份敏感词，一份是名字，一份是聊天，其中名字有一万行，聊天也特么有一万多行。使用过普通匹配后，猛喷出一口老血，这酸爽。。。无奈，使用了字典树，具体步骤是：a，预先遍历敏感词，构造字典树；b，根据输入匹配。貌似说了一堆废话。。。（其实我也不想，是现在闲了）。</p>
<h2 id="字典树实现"><a href="#字典树实现" class="headerlink" title="字典树实现"></a>字典树实现</h2><p>下面直接上代码吧</p>
<pre class="line-numbers language-csharp"><code class="language-csharp">local chat <span class="token operator">=</span> require <span class="token string">"chat"</span>

local chat_dict
local chat_leaves <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">--</span>构造字典树
local function <span class="token function">init_chat_dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    chat_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    local record <span class="token operator">=</span> chat<span class="token punctuation">.</span>table

    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> #record <span class="token keyword">do</span>
        local word <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        local t <span class="token operator">=</span> chat_dict
        <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> #word <span class="token keyword">do</span> 
            local c <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token keyword">byte</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
            <span class="token keyword">if</span> not t<span class="token punctuation">[</span>c<span class="token punctuation">]</span> then
                t<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            end
            t <span class="token operator">=</span> t<span class="token punctuation">[</span>c<span class="token punctuation">]</span>
        end            
        chat_leaves<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span>
    end
end

<span class="token operator">--</span>匹配
function <span class="token function">ShieldChat</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token keyword">if</span> not chat_dict then
        <span class="token function">init_chat_dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    end
    local matchs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> #msg <span class="token keyword">do</span>
        local p <span class="token operator">=</span> i
        local q <span class="token operator">=</span> p
        local t <span class="token operator">=</span> chat_dict
        <span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>
            <span class="token keyword">if</span> not t<span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token keyword">byte</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">]</span> then
                q <span class="token operator">=</span> q <span class="token operator">-</span> <span class="token number">1</span>
                <span class="token keyword">break</span>
            end
            t <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token keyword">byte</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">]</span>
            q <span class="token operator">=</span> q <span class="token operator">+</span> <span class="token number">1</span>
        end
        <span class="token keyword">if</span> q <span class="token operator">>=</span> p then
            local str <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>
            <span class="token keyword">if</span> chat_leaves<span class="token punctuation">[</span>str<span class="token punctuation">]</span> then
                table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>matchs<span class="token punctuation">,</span> <span class="token punctuation">{</span>b <span class="token operator">=</span> p<span class="token punctuation">,</span> e <span class="token operator">=</span> q<span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            end
        end
    end
    local str <span class="token operator">=</span> msg
    <span class="token keyword">for</span> _<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>matchs<span class="token punctuation">)</span> <span class="token keyword">do</span>
        str <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>l<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> v<span class="token punctuation">.</span>e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    end
    <span class="token keyword">return</span> str
end
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上包含最基本功能，剩下的想加可以自行添加其他要求，并希望能得到大家的其他指导！</p>
]]></content>
      
        <categories>
            
            <category> Unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 敏感词 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> Lua </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[unity点选构建Mesh并保存OBJ]]></title>
      <url>/2016/06/08/unity-built-mesh-by-click/</url>
      <content type="html"><![CDATA[<p>最近有一份需求，就是让策划任意选择可一片区域，表明是有某种用途的。埋头写了两头，试了三四种方法，最终不得已用小方格来代替，并最终构建mesh保存下来，这样做程序的就很方便用了。我们的目标就是没有蛀牙大笑oh，应该是累死别人，轻松自己！！！</p>
<h2 id="简单shader编写"><a href="#简单shader编写" class="headerlink" title="简单shader编写"></a>简单shader编写</h2><p>写一个Shader的目的是来显示我们的所编辑的内容，具体代码如下：</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">Shader <span class="token string">"Custom/BlockShader"</span> <span class="token punctuation">{</span>
    Properties <span class="token punctuation">{</span>
        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Base (RGB)"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token function">_Size</span> <span class="token punctuation">(</span><span class="token string">"Size"</span><span class="token punctuation">,</span>Vector<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在面板上显示长多少格，宽多少格</span>
        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        <span class="token function">_RimColor</span> <span class="token punctuation">(</span><span class="token string">"Rim Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">_RimPower</span> <span class="token punctuation">(</span><span class="token string">"Rim Power"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.01</span>
        <span class="token function">_HitPoint</span> <span class="token punctuation">(</span><span class="token string">"Hit Point"</span><span class="token punctuation">,</span>Vector<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//鼠标点击点</span>
        <span class="token function">_SelectColor</span> <span class="token punctuation">(</span><span class="token string">"Select Color"</span><span class="token punctuation">,</span>Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//选中颜色</span>
        <span class="token function">_HitColor</span> <span class="token punctuation">(</span><span class="token string">"Already hit Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    SubShader <span class="token punctuation">{</span>
        Tags <span class="token punctuation">{</span> <span class="token string">"Queue"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token punctuation">}</span>

        CGPROGRAM
        <span class="token macro property">#<span class="token directive keyword">pragma</span> surface surf Lambert alpha</span>
        <span class="token macro property">#<span class="token directive keyword">pragma</span> target 3.0</span>

        sampler2D _MainTex<span class="token punctuation">;</span>
        half4 _Size<span class="token punctuation">;</span>
        fixed4 _Color<span class="token punctuation">;</span>
        fixed4 _RimColor<span class="token punctuation">;</span>
        <span class="token keyword">float</span> _RimPower<span class="token punctuation">;</span>
        float4 _HitPoint<span class="token punctuation">;</span>
        fixed4 _SelectColor<span class="token punctuation">;</span>
        fixed4 _HitColor<span class="token punctuation">;</span>

        <span class="token keyword">struct</span> Input <span class="token punctuation">{</span>
            float2 uv_MainTex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">void</span> <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutput o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            float2 uv <span class="token operator">=</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">;</span>
            fixed4 c <span class="token operator">=</span> _Color<span class="token punctuation">;</span>
            <span class="token keyword">float</span> radiox <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>_Size<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每格大小的一半</span>
            <span class="token keyword">float</span> radioy <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>_Size<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">float</span> nx <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>uv<span class="token punctuation">.</span>x<span class="token operator">/</span><span class="token punctuation">(</span>radiox <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> radiox <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> radiox<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到格的中心点</span>
            <span class="token keyword">float</span> ny <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>uv<span class="token punctuation">.</span>y<span class="token operator">/</span><span class="token punctuation">(</span>radioy <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> radioy <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> radioy<span class="token punctuation">;</span>
            fixed4 tc <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> <span class="token function">float2</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tc<span class="token punctuation">.</span>g <span class="token operator">></span> <span class="token number">0.85</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//因为选中我设置为了绿色（0,1,0,1）</span>
            <span class="token punctuation">{</span>
                c <span class="token operator">=</span> _HitColor<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//if(uv.x >= nx-radiox &amp;&amp; uv.x &lt;nx+ radiox &amp;&amp; uv.y >= ny-radioy &amp;&amp; uv.y &lt;= ny+radioy)</span>
                <span class="token comment" spellcheck="true">//{ </span>
                <span class="token comment" spellcheck="true">//    c = _HitColor;</span>
                <span class="token comment" spellcheck="true">//}</span>
            <span class="token punctuation">}</span>


            <span class="token keyword">if</span><span class="token punctuation">(</span>uv<span class="token punctuation">.</span>x <span class="token operator">>=</span> _HitPoint<span class="token punctuation">.</span>x<span class="token operator">-</span>radiox <span class="token operator">&amp;&amp;</span> uv<span class="token punctuation">.</span>x <span class="token operator">&lt;</span>_HitPoint<span class="token punctuation">.</span>x<span class="token operator">+</span> radiox <span class="token operator">&amp;&amp;</span> uv<span class="token punctuation">.</span>y <span class="token operator">>=</span> _HitPoint<span class="token punctuation">.</span>y<span class="token operator">-</span>radioy <span class="token operator">&amp;&amp;</span> uv<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> _HitPoint<span class="token punctuation">.</span>y<span class="token operator">+</span>radioy<span class="token punctuation">)</span>
            <span class="token punctuation">{</span> 
                c <span class="token operator">=</span> _SelectColor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选中颜色</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fmod</span><span class="token punctuation">(</span>uv<span class="token punctuation">.</span>x <span class="token punctuation">,</span><span class="token punctuation">(</span>radiox <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>radiox <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> _RimPower<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//边框</span>
            <span class="token punctuation">{</span>
                c <span class="token operator">=</span> _RimColor<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fmod</span><span class="token punctuation">(</span>uv<span class="token punctuation">.</span>y <span class="token punctuation">,</span><span class="token punctuation">(</span>radioy <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>radioy <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> _RimPower<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                c <span class="token operator">=</span> _RimColor<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>
            o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ENDCG
    <span class="token punctuation">}</span> 
    FallBack <span class="token string">"Diffuse"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我知道，以上写的很粗糙。。。但是，谁让我是pc上用的呢，谁还管效率是毛线<br>下一步，需要每套的脚本控制</p>
<h2 id="编写控制脚本"><a href="#编写控制脚本" class="headerlink" title="编写控制脚本"></a>编写控制脚本</h2><p>主要是为了运行时，通过点击生成方格</p>
<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 
 * 用于编辑器美术使用脚本，功能为画地形方块
 * 
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TerrianBlockControl</span> <span class="token punctuation">:</span> MonoBehaviour
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Texture2D texture<span class="token punctuation">;</span>
<span class="token preprocessor property">#<span class="token directive keyword">if</span> UNITY_EDITOR</span>
    <span class="token keyword">private</span> Material material<span class="token punctuation">;</span>
    <span class="token keyword">private</span> MeshRenderer meshRenderer<span class="token punctuation">;</span>
    <span class="token keyword">private</span> RaycastHit hit<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">float</span> ratioW<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">float</span> ratioH<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> matrix<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        meshRenderer <span class="token operator">=</span> <span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        material <span class="token operator">=</span> meshRenderer<span class="token punctuation">.</span>material<span class="token punctuation">;</span>
        texture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Texture2D</span><span class="token punctuation">(</span>width <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> height <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        material<span class="token punctuation">.</span><span class="token function">SetTexture</span><span class="token punctuation">(</span><span class="token string">"_MainTex"</span><span class="token punctuation">,</span> texture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ratioW <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token operator">/</span>width<span class="token punctuation">;</span>
        ratioH <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token operator">/</span>height<span class="token punctuation">;</span>
        material<span class="token punctuation">.</span><span class="token function">SetVector</span><span class="token punctuation">(</span><span class="token string">"_Size"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Vector4</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>width<span class="token punctuation">,</span>height<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">MatrixInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ChangeSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        width <span class="token operator">=</span> x<span class="token punctuation">;</span>
        height <span class="token operator">=</span> y<span class="token punctuation">;</span>
        ratioW <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> width<span class="token punctuation">;</span>
        ratioH <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> height<span class="token punctuation">;</span>
        matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>width<span class="token punctuation">,</span>height<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">MatrixInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Ray ray <span class="token operator">=</span> Camera<span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">ScreenPointToRay</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">,</span> <span class="token keyword">out</span> hit<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//算出每个方格的正中心坐标</span>
            <span class="token keyword">float</span> x <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span>textureCoord<span class="token punctuation">.</span>x<span class="token operator">/</span>ratioW<span class="token punctuation">)</span><span class="token operator">*</span>ratioW <span class="token operator">+</span> ratioW<span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">;</span>
            <span class="token keyword">float</span> y <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span>textureCoord<span class="token punctuation">.</span>y <span class="token operator">/</span> ratioH<span class="token punctuation">)</span> <span class="token operator">*</span> ratioH <span class="token operator">+</span> ratioH <span class="token operator">*</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>
            material<span class="token punctuation">.</span><span class="token function">SetVector</span><span class="token punctuation">(</span><span class="token string">"_HitPoint"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Vector4</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButtonDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//算出所在格子的坐标</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span>textureCoord<span class="token punctuation">.</span>x<span class="token operator">/</span>ratioW<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> y <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">FloorToInt</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span>textureCoord<span class="token punctuation">.</span>y<span class="token operator">/</span>ratioH<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            Color  c <span class="token operator">=</span> texture<span class="token punctuation">.</span><span class="token function">GetPixel</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>g <span class="token operator">>=</span> <span class="token number">0.9f</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                texture<span class="token punctuation">.</span><span class="token function">SetPixel</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                matrix<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                texture<span class="token punctuation">.</span><span class="token function">SetPixel</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>
                matrix<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            texture<span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            material<span class="token punctuation">.</span><span class="token function">SetTexture</span><span class="token punctuation">(</span><span class="token string">"_MainTex"</span><span class="token punctuation">,</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">MatrixInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    List<span class="token operator">&lt;</span>rect<span class="token operator">></span> rects<span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token function">ContextMenu</span><span class="token punctuation">(</span><span class="token string">"Save"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> GameObject <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>rect<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//合并，把我们已经画好的方格进行合并</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    rect r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    r<span class="token punctuation">.</span>dl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    r<span class="token punctuation">.</span>dr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    r<span class="token punctuation">.</span>ul <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    r<span class="token punctuation">.</span>ur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    r<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在width方向上进行合并</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            r<span class="token punctuation">.</span>dr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            r<span class="token punctuation">.</span>ur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            matrix<span class="token punctuation">[</span>k<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                            r<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            r<span class="token punctuation">.</span>dl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            r<span class="token punctuation">.</span>ul <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            matrix<span class="token punctuation">[</span>k<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                            r<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    rects<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//把合并过的，相邻的且大小相等的再合并</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>used <span class="token operator">&amp;&amp;</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//没有合并过  不是自身  </span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>used <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> j <span class="token operator">&amp;&amp;</span> rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dl<span class="token punctuation">.</span>x <span class="token operator">==</span> rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>dl<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
                            <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ul<span class="token punctuation">.</span>y <span class="token operator">-</span> rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ul<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                                <span class="token punctuation">{</span>
                                    rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dl <span class="token operator">=</span> rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>dl<span class="token punctuation">;</span>
                                    rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dr <span class="token operator">=</span> rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>dr<span class="token punctuation">;</span>

                                    rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>used <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
                                    rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ul<span class="token punctuation">.</span>y <span class="token operator">-</span> rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ul<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                                <span class="token punctuation">{</span>
                                    rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ul <span class="token operator">=</span> rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ul<span class="token punctuation">;</span>
                                    rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ur <span class="token operator">=</span> rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ur<span class="token punctuation">;</span>

                                    rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>used <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
                                    rects<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ul<span class="token punctuation">.</span>y <span class="token operator">-</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dl<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>used <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token function">creat</span><span class="token punctuation">(</span>rects<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">rect</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> Vector3 dl<span class="token punctuation">;</span>
        <span class="token keyword">public</span> Vector3 dr<span class="token punctuation">;</span>
        <span class="token keyword">public</span> Vector3 ul<span class="token punctuation">;</span>
        <span class="token keyword">public</span> Vector3 ur<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">bool</span> used<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//创建mesh</span>
    GameObject <span class="token function">creat</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>rect<span class="token operator">></span> rects_Old <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>rect<span class="token operator">></span> rects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>rect<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> rr <span class="token keyword">in</span> rects_Old<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>rr<span class="token punctuation">.</span>used<span class="token punctuation">)</span>
                rects<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        GameObject mp <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"MaskParent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameObject</span><span class="token punctuation">(</span><span class="token string">"MaskParent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mp<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>

        GameObject go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameObject</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        go<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>parent <span class="token operator">=</span> mp<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>
        go<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
        MeshFilter mf <span class="token operator">=</span> go<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>MeshFilter<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MeshRenderer mr <span class="token operator">=</span> go<span class="token punctuation">.</span><span class="token generic-method function">AddComponent<span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mr<span class="token punctuation">.</span>material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Material</span><span class="token punctuation">(</span>Shader<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"Diffuse"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Mesh mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mesh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span> vectices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">[</span>rects<span class="token punctuation">.</span>Count<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> trangles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>rects<span class="token punctuation">.</span>Count <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        Vector3 startPos <span class="token operator">=</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>

        <span class="token keyword">float</span> scalex <span class="token operator">=</span> transform<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        <span class="token keyword">float</span> scaley <span class="token operator">=</span> transform<span class="token punctuation">.</span>localScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        startPos<span class="token punctuation">.</span>x <span class="token operator">-</span><span class="token operator">=</span> scalex <span class="token operator">*</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>
        startPos<span class="token punctuation">.</span>z <span class="token operator">-</span><span class="token operator">=</span> scaley <span class="token operator">*</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//添加mesh的Vectices</span>
            rect r <span class="token operator">=</span> rects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            Vector3 dl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>startPos<span class="token punctuation">.</span>x <span class="token operator">+</span> ratioW <span class="token operator">*</span> r<span class="token punctuation">.</span>dl<span class="token punctuation">.</span>x <span class="token operator">*</span> scalex<span class="token punctuation">,</span> startPos<span class="token punctuation">.</span>z <span class="token operator">+</span> ratioH <span class="token operator">*</span> r<span class="token punctuation">.</span>dl<span class="token punctuation">.</span>y <span class="token operator">*</span> scaley<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Vector3 dr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>startPos<span class="token punctuation">.</span>x <span class="token operator">+</span> ratioW <span class="token operator">*</span> r<span class="token punctuation">.</span>dr<span class="token punctuation">.</span>x <span class="token operator">*</span> scalex<span class="token punctuation">,</span> startPos<span class="token punctuation">.</span>z <span class="token operator">+</span> ratioH <span class="token operator">*</span> r<span class="token punctuation">.</span>dr<span class="token punctuation">.</span>y <span class="token operator">*</span> scaley<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Vector3 ul <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>startPos<span class="token punctuation">.</span>x <span class="token operator">+</span> ratioW <span class="token operator">*</span> r<span class="token punctuation">.</span>ul<span class="token punctuation">.</span>x <span class="token operator">*</span> scalex<span class="token punctuation">,</span> startPos<span class="token punctuation">.</span>z <span class="token operator">+</span> ratioH <span class="token operator">*</span> r<span class="token punctuation">.</span>ul<span class="token punctuation">.</span>y <span class="token operator">*</span> scaley<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Vector3 ur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>startPos<span class="token punctuation">.</span>x <span class="token operator">+</span> ratioW <span class="token operator">*</span> r<span class="token punctuation">.</span>ur<span class="token punctuation">.</span>x <span class="token operator">*</span> scalex<span class="token punctuation">,</span> startPos<span class="token punctuation">.</span>z <span class="token operator">+</span> ratioH <span class="token operator">*</span> r<span class="token punctuation">.</span>ur<span class="token punctuation">.</span>y <span class="token operator">*</span> scaley<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            vectices<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> dl<span class="token punctuation">;</span>
            vectices<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dr<span class="token punctuation">;</span>
            vectices<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> ul<span class="token punctuation">;</span>
            vectices<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> ur<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据上面的点顺时针画三角形</span>
            trangles<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">;</span>
            trangles<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
            trangles<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            trangles<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            trangles<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
            trangles<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        mesh<span class="token punctuation">.</span>vertices <span class="token operator">=</span> vectices<span class="token punctuation">;</span>
        mesh<span class="token punctuation">.</span>triangles <span class="token operator">=</span> trangles<span class="token punctuation">;</span>
        mesh<span class="token punctuation">.</span><span class="token function">RecalculateNormals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mesh<span class="token punctuation">.</span><span class="token function">RecalculateBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mf<span class="token punctuation">.</span>mesh <span class="token operator">=</span> mesh<span class="token punctuation">;</span>

        <span class="token keyword">return</span> go<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token preprocessor property">#<span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据以上两步能得到画好的mesh图形，还需要保存。</p>
<h2 id="保存自创Mesh"><a href="#保存自创Mesh" class="headerlink" title="保存自创Mesh"></a>保存自创Mesh</h2><p>这个很蛋疼，因为在运行状态下，原以为保存成预制没事，然后停止后还是尘归尘土归土。。。最后找了很久，感谢<a href="http://blog.csdn.net/awnuxcvbn/article/details/50737192" target="_blank" rel="external">这位的博客</a>帮助，成功导出成OBJ文件，在unity中生成FBX.</p>
<p>具体代码如下：</p>
<pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>
<span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjExporter</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//</span>
    <span class="token comment" spellcheck="true">// Static Methods</span>
    <span class="token comment" spellcheck="true">//</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MeshToFile</span><span class="token punctuation">(</span>MeshFilter mf<span class="token punctuation">,</span> <span class="token keyword">string</span> filename<span class="token punctuation">,</span> <span class="token keyword">float</span> scale<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span>StreamWriter streamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamWriter</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            streamWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>ObjExporter<span class="token punctuation">.</span><span class="token function">MeshToString</span><span class="token punctuation">(</span>mf<span class="token punctuation">,</span> scale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">MeshToString</span><span class="token punctuation">(</span>MeshFilter mf<span class="token punctuation">,</span> <span class="token keyword">float</span> scale<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Mesh mesh <span class="token operator">=</span> mf<span class="token punctuation">.</span>mesh<span class="token punctuation">;</span>
        Material<span class="token punctuation">[</span><span class="token punctuation">]</span> sharedMaterials <span class="token operator">=</span> mf<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>Renderer<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">;</span>
        Vector2 textureOffset <span class="token operator">=</span> mf<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>Renderer<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material<span class="token punctuation">.</span><span class="token function">GetTextureOffset</span><span class="token punctuation">(</span><span class="token string">"_MainTex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Vector2 textureScale <span class="token operator">=</span> mf<span class="token punctuation">.</span><span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>Renderer<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material<span class="token punctuation">.</span><span class="token function">GetTextureScale</span><span class="token punctuation">(</span><span class="token string">"_MainTex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"mtllib design.mtl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"g "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>mf<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Vector3<span class="token punctuation">[</span><span class="token punctuation">]</span> vertices <span class="token operator">=</span> mesh<span class="token punctuation">.</span>vertices<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertices<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Vector3 vector <span class="token operator">=</span> vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"v {0} {1} {2}\n"</span><span class="token punctuation">,</span> vector<span class="token punctuation">.</span>x <span class="token operator">*</span> scale<span class="token punctuation">,</span> vector<span class="token punctuation">.</span>z <span class="token operator">*</span> scale<span class="token punctuation">,</span> vector<span class="token punctuation">.</span>y <span class="token operator">*</span> scale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Dictionary<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mesh<span class="token punctuation">.</span>subMeshCount <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> triangles <span class="token operator">=</span> mesh<span class="token punctuation">.</span><span class="token function">GetTriangles</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> triangles<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>triangles<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dictionary<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>triangles<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>triangles<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dictionary<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>triangles<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>triangles<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dictionary<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>triangles<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> num <span class="token operator">!=</span> mesh<span class="token punctuation">.</span>uv<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Vector2 vector2 <span class="token operator">=</span> Vector2<span class="token punctuation">.</span><span class="token function">Scale</span><span class="token punctuation">(</span>mesh<span class="token punctuation">.</span>uv<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> textureScale<span class="token punctuation">)</span> <span class="token operator">+</span> textureOffset<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"vt {0} {1}\n"</span><span class="token punctuation">,</span> mesh<span class="token punctuation">.</span>uv<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> mesh<span class="token punctuation">.</span>uv<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"vt {0} {1}\n"</span><span class="token punctuation">,</span> vector2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> vector2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> mesh<span class="token punctuation">.</span>subMeshCount<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"usemtl "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"Material_design"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"usemtl "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"Material_logo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> triangles2 <span class="token operator">=</span> mesh<span class="token punctuation">.</span><span class="token function">GetTriangles</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> triangles2<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"f {0}/{0} {1}/{1} {2}/{2}\n"</span><span class="token punctuation">,</span> triangles2<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> triangles2<span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> triangles2<span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        <categories>
            
            <category> Unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Mesh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/06/04/hello-world/</url>
      <content type="html"><![CDATA[<p>从来没有写过博文，虽然从几年前就开始计划写自己的东西，或者起码把自己遇到的问题记录下来，然后某天自己可以再看看…于是，我把所有的问题归结为：懒！<br>五年前（好吧一看时间感觉很久了——满满沧桑感。。。），2011年进入大学开始接触程序，无论哪种语言第一行必须是： “Hello World !” ，我认为这祸害了我，不管第一次做出来什么东西都有想说一句helloworld的冲动。偶然间听到、看到其他人说关于类似事情的时候，我也会想，等以后退休了练习书法，第一个写出来的是不是也会是Hello World，这是愚、悲还是专呢。。。<br>一年零一个月前，参加完研究生复试通过，但还是一狠心一咬牙给放弃了，一个人拖着皮箱背着书包来到了这里，紧张、不安、彷徨、迷茫、害怕、无助充满了心中。。。好吧不堪回首，最主要的是发现自己词穷了，一年的程序经历，发现自己不会说话了，留给自己有感而发时再写吧</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World Hexo]]></title>
      <url>/2016/06/01/hello-world-hexo/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
